<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UltimateFtpCF</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus">
            <summary>
            License check status.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus.UnableToValidate">
            <summary>
            UltimateLicenseManager was unable to validate the license.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus.KeyNotSigned">
            <summary>
            The key is not signed.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus.InvalidKey">
            <summary>
            Invalid license key.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus.UnableToRead">
            <summary>
            Unable to read license data.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus.InvalidDate">
            <summary>
            Expiry date is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus.LicenseExpired">
            <summary>
            License is expired.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Ftp.UltimateLicenseException">
            <summary>Represents the License Exception.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Ftp.UltimateLicenseException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Ftp.UltimateLicenseException"></see> class. </summary>
        </member>
        <member name="M:ComponentPro.Licensing.Ftp.UltimateLicenseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Ftp.UltimateLicenseException"></see> class with the specified error message.</summary>
            <param _name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
        </member>
        <member name="M:ComponentPro.Licensing.Ftp.UltimateLicenseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Ftp.UltimateLicenseException"></see> class with the specified error message and inner exception.</summary>
            <param _name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
            <param _name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="P:ComponentPro.Licensing.Ftp.UltimateLicenseException.Status">
            <summary>Gets the error code.</summary>
            <returns>An <see cref="T:ComponentPro.Licensing.Ftp.UltimateLicenseExceptionStatus"></see> value that indicates the error that occurred.</returns>
        </member>
        <member name="T:ComponentPro.Licensing.Ftp.UltimateLicenseManager">
            <summary>
            ComponentPro License Manager.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:ComponentPro.Net.Ftp">
            <summary>
            Provides essential methods to transfer files and directories directly from your .NET application to FTP, FTP/SSL servers.
            </summary>
            <remarks>Methods and properties of this class are thread-safe.</remarks>
        </member>
        <member name="F:ComponentPro.Net.Ftp.DefaultPort">
            <summary>
            Represents default FTP port - 21.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,ComponentPro.IO.IFileInfo[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to download, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to download, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,ComponentPro.IO.IFileInfo[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system using multiple threads.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to download, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system using multiple threads.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to download, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationFileSystem">The destination file system that receives the files from this remote file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to download, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to download, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Downloads all files in the specified remote directory to the local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects to download, or null to transfer files that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects to download, or null to transfer files that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,System.String)">
            <summary>
            Downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Downloads files in the specified remote directory that match the specified search pattern to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String)">
            <summary>
            Downloads all files in the specified remote directory to the specified local directory on the disk file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be downloaded, "/myremotedir" means all files in '/myremotedir' will be downloaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,System.String)">
            <summary>
            Downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory to the local directory.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to download subdirectories in the specified directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadDirectory(System.String,ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Downloads an entire remote directory to the destination directory on the destination file system.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the directory on the destination file system to receive files from this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to upload, or null to transfer files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of filenames to upload, or null to transfer files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to upload, or null to transfer files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified source directory on the specified source file system that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system containing files to upload.</param>
            <param name="sourceDirectoryPath">The path of the source directory on the source file system to upload files to this remote file system. 
            When the parameter <paramref name="sourceFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="sourceFilesToTransfer">The list of filenames to upload, or null to transfer files in the <paramref name="sourceDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to upload, or null to transfer files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of filenames to upload, or null to transfer files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to upload, or null to transfer files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            When the parameter <paramref name="localFilesToTransfer"/> is null reference, This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="localFilesToTransfer">The list of filenames to upload, or null to transfer files in the <paramref name="localDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads files from the specified local directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,System.String)">
            <summary>
            Uploads files from the specified local directory that match the specified search pattern to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String)">
            <summary>
            Uploads all files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system. 
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory to store uploaded files.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Uploads all files from the specified local directory to the specified remote directory using multiple threads.
            </summary>
            <param name="localDirectoryPath">The path of the local directory to upload files to this remote file system.
            This can contains wild card masks. For example, "c:\mydir\*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in 'c:\mydir' will be uploaded, "c:\mydir" means all files in 'c:\mydir' will be uploaded. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String)">
            <summary>
            Uploads an entire directory from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.Boolean)">
            <summary>
            Uploads an entire directory from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.String)">
            <summary>
            Uploads an entire directory from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads an entire directory from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Uploads an entire directory from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Uploads an entire directory from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean)">
            <summary>
            Uploads an entire directory from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Uploads an entire directory from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory for storing files.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory from the disk file system to the current working remote directory on the server.
            </summary>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory from the disk file system to the specified remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory from the disk file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the directory on the disk file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory from the specified source file system to the current working remote directory on the server.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <param name="recursive">A boolean value indicating whether to upload subdirectories in the specified source directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadDirectory(ComponentPro.IO.FileSystem,System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Uploads an entire directory from the specified source file system to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the directory on the source file system to upload files to this remote file system.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Moves all files in the specified remote directory to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String,System.String)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String,System.Boolean,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String)">
            <summary>
            Moves all files in the specified remote directory to the specified destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server using multiple threads.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server using multiple threads.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="threads">The number of threads used for the file transfer.</param>
            <param name="waitForThreads">A boolean value indicating whether to wait for the completion of all threads. If this parameter is true, this method will block the caller process's execution until all threads have completed; otherwise, this method will immediately return the control to the caller process.</param>
            <returns>A list of source and destination file systems used for the file transfer.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUploadFilesCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UploadFilesCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnDownloadFilesCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.DownloadFilesCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnMoveFilesCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.MoveFilesCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory. Accepts wildcards.
            </summary>
            <param name="localPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory. Accepts wildcards.
            </summary>
            <param name="localPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory. Accepts wildcards.
            </summary>
            <param name="localPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="localFiles">List of files to upload, null to ignore this parameter, items in the specified directory are to be uploaded.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="localFiles">List of files to upload, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="localFiles">List of files to upload, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="localFiles">List of files to upload, null to ignore this parameter, items in the specified directory are to be uploaded.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="localFiles">List of files to upload, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="localFiles">List of files to upload, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,System.String,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,System.String)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Uploads files from the specified local directory to the specified remote directory.
            </summary>
            <param name="localDirectoryPath">The path of the local file or directory.</param>
            <param name="remoteDirectoryPath">The path of the remote directory. This must be a directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndUploadFiles(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.Net.Ftp.UploadFiles(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Begins asynchronous DownloadFiles operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remotePath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="remoteFiles">List of files to download, null to ignore this parameter.</param>
            <param name="transferOptions">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,System.String)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,System.String,System.Object)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,System.String)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,System.String)">
            <summary>
            Begins asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,System.String,System.String)"/> operation.
            Downloads files from the specified remote directory to the local directory on the disk file system
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to download.</param>
            <param name="localDirectoryPath">The path of the local directory on the disk file system to receive files from this remote file system.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndDownloadFiles(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.Net.Ftp.DownloadFiles(System.String,ComponentPro.IO.IFileInfo[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,System.String,System.Object)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,System.String)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="searchPattern">The search string to match against the names of files in path.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,ComponentPro.IO.IFileInfo[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of <see cref="T:ComponentPro.IO.IFileInfo"/> objects containing information of files to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions,System.Object)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String[],System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Moves files from the specified remote directory that match the search condition specified in the <paramref name="options">option parameter</paramref> to the destination remote directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            When the parameter <paramref name="remoteFilesToTransfer"/> is null reference, this can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="remoteFilesToTransfer">The list of filenames to move, or null to transfer files in the <paramref name="remoteDirectoryPath"/> that match the search condition specified in the <paramref name="options">option parameter</paramref>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="options">The transfer options object which provides many settings to control the file transfer process.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,System.Object)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String)">
            <summary>
            Moves files in the specified remote directory that match the specified search pattern to the destination directory on the server.
            </summary>
            <param name="remoteDirectoryPath">The path of the remote directory containing files and subdirectories to move. 
            This can contains wild card masks. For example, "/myremotedir/*.dat;*.cs,*.vb" means all .dat, .cs, and .vb files in '/myremotedir' will be moved, "/myremotedir" means all files in '/myremotedir' will be moved. For more details, see <see cref="T:ComponentPro.IO.NameSearchCondition"/> and the option <see cref="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath"/>.</param>
            <param name="destinationRemoteDirectoryPath">The path of the destination remote directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndMoveFiles(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.Net.Ftp.MoveFiles(System.String,System.String,System.Int32,System.Boolean)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Ftp class with a container.
            </summary>
            <param name="container">The container object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the container is null.</exception>
        </member>
        <member name="M:ComponentPro.Net.Ftp.#ctor">
            <summary>
            Initializes a new instance of the Ftp class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            <p>
            This method cancels the current operation. When data is being transferred, calling this method causes the object to attempt to abort the data transfer gracefully. 
            If the <see cref="P:ComponentPro.Net.Ftp.SendAbortCommand"/> property is enabled, the method will send the ABOR command to the FTP server. If the <see cref="P:ComponentPro.Net.Ftp.SendTelnetInterruptSignal"/> property is enabled and the current operation is a file download,
            the method will send Telnet interrupt signal to an FTP server.
            </p>
            <p>
            The <see cref="M:ComponentPro.Net.Ftp.Cancel"/> method can also be used to abort other processes. For example, this method can be used to abort lengthly multiple-file transfer, multiple-file deletion processes, etc.
            </p>
            <p>
            If the <see cref="P:ComponentPro.Net.Ftp.State"/> property is not <see cref="T:ComponentPro.IO.RemoteFileSystemState">Idle</see> state, you might need to call the <see cref="M:ComponentPro.Net.Ftp.Flush(System.Int32)"/> to set it back to the <see cref="T:ComponentPro.IO.RemoteFileSystemState">Idle</see> state.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.IsCancelling">
            <summary>
            Returns a boolean value indicating whether the current operation is being aborted.
            </summary>
            <returns>The boolean value indicating whether the current operation is being aborted.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.IO.Stream,System.String)">
            <summary>
            Appends the content of the specified data stream to the file on the remote FTP server.
            </summary>
            <param name="data">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <remarks>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.String,System.String)">
            <summary>
            Appends the content of the local file to the file on the remote FTP server.
            </summary>
            <param name="localPath">The path of the local file to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Appends the content of the data stream to the file on the remote FTP server.
            </summary>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="data">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Appends the content of the local file to the file on the remote FTP server.
            </summary>
            <param name="localPath">The path of the local file to transfer.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
        </member>
        <member name="M:ComponentPro.Net.Ftp.AppendFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Appends the content of the data stream to the file on the remote FTP server.
            </summary>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="data">The data stream to transfer.</param>
            <param name="remotePath">The path of the remote file. This can either be a relative or absolute path, and must not point to a directory.</param>
            <returns>The number of bytes transferred.</returns>
            <returns>The number of bytes transferred.</returns>
            <p>
            This method represents FTP APPE command.
            </p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)">
            <summary>
            Changes the current working folder of the FTP server.
            </summary>
            <param name="remotePath">The new current working folder. Some FTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            This method uses CDUP command for ".." pathnames. "." pathnames are ignored. For other pathnames, CWD command is used.
            </p>
            <p>
            Both relative and absolute paths can be provided to the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the FTP server's current working folder, 
            however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths.
            The FTP server's current working folder is used by the FTP server as the base folder from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. 
            </p>
            <p>
            The current working folder can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ClearCommandChannel">
            <summary>
            Clears the command channel after login to facilitate firewall NAT when connecting using a secure data channel. This reverts the protected control connection back to plaintext connection.
            </summary>
            <remarks>
            <p>
            This method implements the FTP CCC (Clear Command Channel) command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String)">
            <summary>
            Connects to the remote FTP server.
            </summary>
            <param name="serverName">The server address. It can either be a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote FTP server.
            </summary>
            <param name="serverName">The server address. It can either be a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Connects to the remote FTP server with the specified security mode.
            </summary>
            <param name="serverName">The server address. It can either be a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="security">The connection security mode.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Connect(System.Object[])">
            <summary>
            Connects to the FTP server with the specified parameters. For internal uses only.
            </summary>
            <param name="parameters">The connection parameters.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateDirectory(System.String)">
            <summary>
            Create a directory on the FTP server.
            </summary>
            <param name="remotePath">The name of the directory to create. Some FTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            This method implements FTP MKD command.
            </p>
            <p>
            By default, the directory will be created in the current working directory. 
            If you want to create the directory in another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DeleteFile(System.String)">
            <summary>
            Deletes the specified file on the remote FTP server.
            </summary>
            <param name="remotePath">The name of the file to delete. Some FTP servers may be case-sensitive. It can either be an absolute pathname or relative to the current directory.</param>
            <remarks>
            <p>
            This method represents FTP DELE command.
            </p>
            <p>
            By default, the file will be deleted from the current working directory. 
            If you want to delete the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DirectoryExists(System.String)">
            <summary>
            Checks whether the specified directory exists on the server. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory to check.</param>
            <returns><b>true</b> if the directory exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Disconnect">
            <summary>
            Disconnects the FTP client from the FTP server to which it is connected.
            </summary>
            <remarks>The Disconnect method will send the QUIT command to the FTP server and make sure that the command connection is closed.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.FileExists(System.String)">
            <summary>
            Checks whether the specified file exists on the server.
            </summary>
            <param name="remotePath">The path of the remote file to check.</param>
            <returns><b>true</b> if the file exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Flush(System.Int32)">
            <summary>
            Reads and returns control connection data, if available.
            </summary>
            <param name="timeLimit">The length of time (in milliseconds) to wait for data to be received.</param>
            <returns><see cref="T:ComponentPro.Net.FtpResponse">FtpResponse</see> if data was read or <b>null</b> reference if no data was read.</returns>
            <remarks>
            <p>
            This method can either be used to read messages from the FTP server that are not responses to any commands, 
            or to set the <see cref="P:ComponentPro.Net.Ftp.State"/> property back to the <see cref="T:ComponentPro.IO.RemoteFileSystemState">Idle</see> state if it is not <see cref="T:ComponentPro.IO.RemoteFileSystemState">Idle</see> state after aborting a file transfer with the <see cref="M:ComponentPro.Net.Ftp.Cancel"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetCurrentDirectory">
            <summary>
            Retrieves the current working directory of the FTP server.
            </summary>
            <returns>
            A string representing the FTP server's current directory. The path returned is an absolute path that can be used with the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> to go directly to this directory regardless of the current working directory.
            </returns>
            <remarks>
            <p>
            The FTP server's current working folder is used by the FTP server as the base folder from which to perform file operations such as obtaining folder contents, receiving, sending and deleting files, changing the current folder, etc. 
            It can be changed using the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method. The <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method will send the PWD command to the FTP server.
            </p>
            <p>
            Some servers (eg. TOPS-20) do not support this method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStream(System.String)">
            <summary>
            Retrieves a direct access to the readonly data stream being received.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <returns>The data Stream to read from.</returns>
            <remarks>
            <p>
            The stream has to be closed before any other FTP operation can be used.
            </p>
            <p>
            By default, the file will be retrieved from the current working directory. 
            If you want to retrieve the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>        
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDownloadStream(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Retrieves a direct access to the readonly data stream being received, beginning at the specified offset.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <returns>The data Stream to read from.</returns>
            <remarks>
            <p>
            The stream has to be closed before any other FTP operation can be used.
            </p>
            <p>
            By default, the file will be retrieved from the current working directory. 
            If you want to retrieve the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>        
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.IO.Stream)">
            <summary>
            Receives the specified remote file to the specified Stream.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <param name="outputStream">A reference to the Stream to which to receive the file.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            By default, the file will be received from the current working directory. 
            If you want to receive the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.String)">
            <summary>
            Receives the specified file from the FTP server and stores it on the local system using the specified path and filename.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <param name="localPath">The path and filename of the file as it will be stored on the local system.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            By default, the file will be received from the current working directory. 
            If you want to receive the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Receives the specified file from the FTP server into the specified Stream, starting from the specified offset.
            </summary>
            <param name="remotePath">The filename of the file to retrieve. Some FTP servers may be case-sensitive.</param>
            <param name="remoteOffset">The byte offset at which to start receiving data from the remote file.</param>
            <param name="outputStream">A reference to the Stream to which to receive the file.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            By default, the file will be received from the current working directory. 
            If you want to receive the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DownloadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset of the local file.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            By default, the file will be received from the current working directory. 
            If you want to receive the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> method to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified remote file or directory was last written to. Some servers return times in their local time zones, some use GMT and some do not support this feature.
            </summary>
            <param name="remotePath">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified remote file.
            </summary>
            <param name="remotePath">The path of the file.</param>
            <returns>file size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Ftp.UseMlst"/> is enabled, it will send the MLSD command if the server supports; otherwise, LIST command will be used. To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.Listing"/> event.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists all files and subdirectories that match the specified search condition in the current working directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Ftp.UseMlst"/> is enabled, it will send the MLSD command if the server supports; otherwise, LIST command will be used. To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.Listing"/> event.
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(System.String)">
            <summary>
            Lists all files and subdirectories that match the specified search condition in the specified directory.
            </summary>
            <param name="parameter">Arguments for the LIST or MLSD command. It is usually the path of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Ftp.UseMlst"/> is enabled, it will send the MLSD command if the server supports; otherwise, LIST command will be used. To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.Listing"/> event.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists all files and subdirectories that match the specified search condition in the current working directory.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Ftp.UseMlst"/> is enabled, it will send the MLSD command if the server supports; otherwise, LIST command will be used. To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.Listing"/> event.
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Lists all files and subdirectories that match the specified search condition in the specified directory.
            </summary>
            <param name="parameter">Arguments for the LIST or MLSD command. It is usually the path of the directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Ftp.UseMlst"/> is enabled, it will send the MLSD command if the server supports; otherwise, LIST command will be used. To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.Listing"/> event.
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists all files and subdirectories that match the specified search condition in the specified directory.
            </summary>
            <param name="arguments">Arguments for the LIST or MLSD command. It is usually the path of the directory to list.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.Net.FtpFileInfo"/>.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Ftp.UseMlst"/> is enabled, it will send the MLSD command if the server supports; otherwise, LIST command will be used. To implement a custom listing parser, simply handle the <see cref="E:ComponentPro.Net.Ftp.Listing"/> event.
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListName">
            <summary>
            Returns a list of file and directory names in the current working directory. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <return>An array of names.</return>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListName(System.String)">
            <summary>
            Returns a list of file and directory names. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <param name="arguments">Arguments for the NLST command. It is usually the path of the directory to list.</param>
            <return>An array of names.</return>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawName">
            <summary>
            Retrieves an unprocessed, clear text list representing the entire contents of current working directory as sent by the FTP server. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <return>An array of raw lines.</return>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ListRawName(System.String)">
            <summary>
            Retrieves an unprocessed, clear text list representing the entire contents of the specified directory as sent by the FTP server. Using <see cref="M:ComponentPro.Net.Ftp.ListDirectory"/> is a better choice in most cases.
            </summary>
            <param name="arguments">Arguments for the LIST command. It is usually the path of the directory to list.</param>
            <return>An array of raw lines.</return>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStream(System.String)">
            <summary>
            Retrieves a direct access to the write-only data stream to send to.
            </summary>
            <param name="remotePath">The filename of the file to write to. Some FTP servers may be case-sensitive.</param>
            <returns>A Stream for writing data to the remote file.</returns>
            <remarks>
            <p>The stream has to be closed before any other FTP operation can be used.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetUploadStream(System.String,System.IO.SeekOrigin,System.Int64)">
            <summary>
            Retrieves a direct access to the write-only data stream to send to, beginning at the specified offset.
            </summary>
            <param name="remotePath">The filename of the file to write to. Some FTP servers may be case-sensitive.</param>
            <returns>A Stream for writing data to the remote file.</returns>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <remarks>
            <p>The stream has to be closed before any other FTP operation can be used.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.KeepAlive">
            <summary>
            Sends a NOOP command to the server to keep the connection alive. Some servers ignore the NOOP command.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the FTP server to which it is connected using the specified username and password.
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <remarks>
            <p>
            The FTP client must be connected to the FTP server using the <b>Connect</b> method prior to calling this method. 
            The Login method will send the USER, PASS and ACCT commands to the FTP server.
            </p>
            <p>This method represents FTP USER/PASS command pair.</p>
            <p>If the userName parameter is a null reference or empty, "anonymous" is used. If the password parameter is a null reference or empty, "user@anonymous.com" is used.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Authenticate(System.String,System.String,System.String)">
            <summary>
            Authenticates the user to the FTP server to which it is connected using the specified username and password.
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <remarks>
            <p>
            The FTP client must be connected to the FTP server using the <b>Connect</b> method prior to calling this method. 
            The Login method will send the USER, PASS and ACCT commands to the FTP server.
            </p>
            <p>This method represents FTP USER/PASS command pair.</p>
            <p>If the userName parameter is a null reference or empty, "anonymous" is used. If the password parameter is a null reference or empty, "user@anonymous.com" is used.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Authenticate(System.Object[])">
            <summary>
            Authenticates the user to the FTP server to which it is connected using the specified parameters. For internal uses only.
            </summary>
            <param name="parameters">The authentication parameters.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.IO.Stream,System.String)">
            <summary>
            Uploads the data from the specified Stream to the FTP server and stores it using the specified filename.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            <p>This method represents FTP STOR command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.String,System.String)">
            <summary>
            Uploads the specified local file to the FTP server and stores it using the specified filename.
            </summary>
            <param name="localPath">The path and filename of the local file to upload.</param>
            <param name="remotePath">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            <p>This method represents FTP STOR command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads the data from the specified Stream to the FTP server and stores it using the specified filename, starting from the specified remote offset.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            <p>This method represents FTP STOR command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Uploads the specified file to the FTP server and stores it using the specified filename, starting from the specified local offset and remote offset.
            </summary>
            <param name="localPath">The path and filename of the local file to upload.</param>
            <param name="remotePath">The filename as it will be stored on the FTP server. Cannot be empty. Some FTP servers may be case-sensitive.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transferred.</returns>
            <remarks>
            <p>This method represents FTP STOR command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFile(System.IO.Stream)">
            <summary>
            Uploads the data from the specified Stream to the FTP server and stores it using a unique filename. Many servers do not support this feature and many servers support this incorrectly, such as MS FTP.
            </summary>
            <param name="sourceStream">A Stream whose data is to be sent to the FTP server.</param>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.UploadUniqueFile(System.String)">
            <summary>
            Uploads the data from the specified file to the FTP server's current working folder and stores it using a unique filename. Many servers do not support this feature and many servers support this incorrectly, such as MS FTP.
            </summary>
            <param name="localPath">The path and filename of the local file to send.</param>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>
            By default, the file will be uploaded to the current working directory. 
            If you want to upload the file to another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ReadResponse">
            <summary>
            Returns the response of the FTP server to the command that was sent previously.
            </summary>
            <returns>Response of the FTP server.</returns>
            <remarks>
            A call to the <see cref="M:ComponentPro.Net.Ftp.SendCommand(System.String)"/> must be made prior to calling this method. Use <see cref="M:ComponentPro.Net.Ftp.SendCommand(System.String)"/> and <see cref="M:ComponentPro.Net.Ftp.ReadResponse"/> methods to implement custom FTP commands.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory from the FTP server. To delete a directory containing files and subdirectories, use the <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)">DeleteDirectory</see> method.
            </summary>
            <param name="remotePath">The name of the folder to delete. Some FTP servers may be case-sensitive. This directory must not contain files and subdirectories.</param>
            <remarks>
            <p>
            This method represents FTP RMD command.
            </p>
            <p>
            By default, the directory will be deleted from the current working directory. 
            If you want to delete the directory from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>        
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Rename(System.String,System.String)">
            <summary>
            Renames a file or directory on the FTP server.
            </summary>
            <param name="fromPath">The filename of the file to rename. Some FTP servers may be case-sensitive.</param>
            <param name="toPath">The new filename. Some FTP servers may be case-sensitive.</param>
            <remarks>
            <p>
            This method represents FTP RNFR/RNTO command pair.
            </p>
            <p>
            By default, the file will be renamed in the current working directory. 
            If you want to rename the file from another location, you could use the <see cref="M:ComponentPro.Net.Ftp.SetCurrentDirectory(System.String)"/> methods to change the current working directory. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and different server types may have different ways of representing absolute paths. 
            The current working directory can be retrieved via the <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SendCommand(System.String)">
            <summary>
            Sends a custom command to the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server (eg. "LIST").</param>
            <remarks>
            After calling this method, use the <see cref="M:ComponentPro.Net.Ftp.ReadResponse">ReadResponse</see> method to receive response from the server.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. Some servers do not support this feature.
            </summary>
            <param name="remotePath">The file for which to set the date and time information. </param>
            <param name="newDateTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Ftp" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetFileInfo(System.String)">
            <summary>
            Returns an <see cref="T:ComponentPro.Net.FtpFileInfo"/> object containing information of the specified file.
            </summary>
            <param name="remotePath">The name of the file to get information.</param>
            <returns>An <see cref="T:ComponentPro.Net.FtpFileInfo"/> object containing information of the specified file.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ProcessException(System.Exception)">
            <summary>
            Processes an exception. For internal uses only.
            </summary>
            <param name="x">The exception.</param>
            <returns>The processed exception.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetUploadStream(System.String,System.IO.SeekOrigin,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to return a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndGetUploadStream(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file upload.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A Stream for writing data to the remote file.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnKeepAliveCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.KeepAliveCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginKeepAlive(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to sends the NOOP command to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginKeepAlive(System.Object)">
            <summary>
            Begins an asynchronous operation to sends the NOOP command to the server to keep the connection alive.
            </summary>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginKeepAlive">
            <summary>
            Begins an asynchronous operation to sends the NOOP command to the server to keep the connection alive.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndKeepAlive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous NOOP command.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnAuthenticateCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.AuthenticateCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAuthenticate(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAuthenticate(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAuthenticate(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous login.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUploadFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UploadFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP STOR command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndUploadFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file upload.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnUploadUniqueFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.UploadUniqueFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.IO.Stream,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.IO.Stream)">
            <summary>
            Begins an asynchronous operation to upload the content of the data stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.String)">
            <summary>
            Begins an asynchronous operation to upload the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly, such as MS FTP.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndUploadUniqueFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file upload.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Name of unique remote file.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnReadResponseCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ReadResponseCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginReadResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to return the server response.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginReadResponse(System.Object)">
            <summary>
            Begins an asynchronous operation to return the server response.
            </summary>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginReadResponse">
            <summary>
            Begins an asynchronous operation to return the server response.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndReadResponse(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous response read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Response of the FTP server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSendCommandCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SendCommandCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSendCommand(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to execute a command on the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSendCommand(System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to execute a command on the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSendCommand(System.String)">
            <summary>
            Begins an asynchronous operation to execute a command on the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndSendCommand(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous command send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnClearCommandChannelCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ClearCommandChannelCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginClearCommandChannel(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to send CCC command to the server. Reverts the protected control connection back to plaintext connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginClearCommandChannel(System.Object)">
            <summary>
            Begins an asynchronous operation to send CCC command to the server. Reverts the protected control connection back to plaintext connection.
            </summary>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginClearCommandChannel">
            <summary>
            Begins an asynchronous operation to send CCC command to the server. Reverts the protected control connection back to plaintext connection.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndClearCommandChannel(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous rename CCC operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnConnectCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ConnectCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Int32)">
            <summary>
            Initiates an asynchronous operation to connect to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Int32,ComponentPro.Net.SecurityMode,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to the TLS/SSL FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 990).</param>
            <param name="security">FTP security type.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Int32,ComponentPro.Net.SecurityMode,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to the TLS/SSL FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 990).</param>
            <param name="security">FTP security type.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Int32,ComponentPro.Net.SecurityMode)">
            <summary>
            Initiates an asynchronous operation to connect to the TLS/SSL FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 990).</param>
            <param name="security">FTP security type.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connect.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnDisconnectCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.DisconnectCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP QUIT command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDisconnect(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDisconnect">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The exit message returned by the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnGetCurrentDirectoryCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.GetCurrentDirectoryCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetCurrentDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Gets the absolute path of the current working directory on the remote server.
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP PWD command.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetCurrentDirectory(System.Object)">
            <summary>
            Initiates an asynchronous operation to get the absolute path of the current working directory on the remote server.
            </summary>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP PWD command.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetCurrentDirectory">
            <summary>
            Initiates an asynchronous operation to get the absolute path of the current working directory on the remote server.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP PWD command.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndGetCurrentDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A string containing the absolute path of the current working remote directory.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetDownloadStream(System.String,System.IO.SeekOrigin,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="origin">Position indicator that is used to obtain new position within the stream.</param>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndGetDownloadStream(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file download.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A Stream for reading data from the remote file.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnDownloadFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.DownloadFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:ComponentPro.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.String)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>
            <p>This method represents FTP RETR command.</p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.String,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Initiates an asynchronous operation to download the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file. This cannot be a directory.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file download.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnAppendFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.AppendFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.String,System.String,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.String,System.String)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.Int64,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.String,System.String,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.String,System.String,System.Int64,System.Int64,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginAppendFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
            <remarks>This method represents FTP APPE command.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndAppendFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file append.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSetFilePermissionsCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SetFilePermissionsCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,ComponentPro.Net.FtpFilePermissions)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,System.Int32)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,System.String)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndSetFilePermissions(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnGetServerTimeDifferenceCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.GetServerTimeDifferenceCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetServerTimeDifference(System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetServerTimeDifference(System.Object)">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginGetServerTimeDifference">
            <summary>
            Initiates an asynchronous operation to get the time difference between the client and server. Not all FTP servers support this!
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndGetServerTimeDifference(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnSetMultipleFilesPermissionsCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Initiates an asynchronous operation to set the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndSetMultipleFilesPermissions(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous SetMultipleFilesPermissions operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetActiveTransferType(ComponentPro.Net.FtpTransferType)">
            <summary>
            Sets active transfer type.
            </summary>
            <param name="transferType">The desired transfer type.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetServerTimeDifference">
            <summary>
            Returns the time difference between the client and server.
            </summary>
            <returns>The time difference between the client and server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissions(System.String,ComponentPro.Net.FtpFilePermissions)">
            <summary>
            Sets the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissions(System.String,System.String)">
            <summary>
            Sets the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetFilePermissions(System.String,System.Int32)">
            <summary>
            Sets the permissions of the specified remote file. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="permissions">The file permissions.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.Int32,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.String,System.Boolean)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetMultipleFilesPermissions(System.String,System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Sets the permissions of the specified remote files. Not all FTP servers support this!
            </summary>
            <param name="remotePath">The path of the remote directory.</param>
            <param name="permissions">The file permissions.</param>
            <param name="recursive">Set permissions of files in the specified directory and all subdirectories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <remarks>
            <p>
            Represents SITE CHMOD command.
            </p>
            </remarks>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnStateChanged(ComponentPro.IO.RemoteFileSystemStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.StateChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnCommandResponse(ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.CommandResponse" /> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnCertificateReceived(System.Object,ComponentPro.Security.CertificateReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.CertificateReceived" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnCertificateRequired(System.Object,ComponentPro.Security.CertificateRequiredEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.CertificateRequired" /> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetConnectionParameters">
            <summary>
            Gets connection parameters. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetAuthenticationParameters">
            <summary>
            Gets authentication parameters. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.NormalizePath(System.String)">
            <summary>
            Normalizes a path. This will normalize path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CreateFileInfo(System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo"/> class and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="attrs">The file attributes.</param>
            <param name="size">The file size in bytes.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.DiskFileInfo"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ValidatePath(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ValidatePathCanBeEmpty(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.TransferDataFromStreamToFile(ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Int64,ComponentPro.IO.IFileInfo,System.Int64,System.Int64)">
            <summary>
            For internal uses only. Copies content of the specified data stream to the specified file on the local disk.
            </summary>
            <param name="source"></param>
            <param name="sourceOffset"></param>
            <param name="destinationOffset"></param>
            <param name="length"></param>
            <param name="sourceFileSystem"></param>
            <param name="destinationFile"></param>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.TransferDataFromStreamToFile(ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,ComponentPro.IO.IFileInfo)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,System.Int64,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Int64)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Boolean,System.Int64)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetStreamForWriting(System.String,System.Int64)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.GetStreamForReading(System.String,System.Int64)">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.Clone">
            <summary>
            Returns a copy of the current file system.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Ftp.SetLocalPortRange(System.Int32,System.Int32)">
            <summary>
            Sets the local TCP port range used for data transfers.
            </summary>
            <param name="min">The minimum port value.</param>
            <param name="max">The maximum port value.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFile(System.IO.Stream,System.String)">
            <summary>
            Resumes uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeUploadFile(System.String,System.String)">
            <summary>
            Resumes uploading the content of the local file to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The number of bytes transferred. -1 if the remote file size is greater than the local file size. 0 if no need to resume upload because remote file size is equal to local file size.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeDownloadFile(System.String,System.String)">
            <summary>
            Resumes download the content of the remote file to the previously interrupted local file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>The number of bytes transferred, -1 if the local file size is greater than the remote file size, or 0 if no need to resume download because the remote file size is equal to the local file size.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.ResumeDownloadFile(System.String,System.String,System.Int64@)">
            <summary>
            Resumes download the content of the remote file to previously interrupted local file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="remoteSize">Returns remote file size.</param>
            <returns>The number of bytes transferred, -1 if the local file size is greater than the remote file size, or 0 if no need to resume download because the remote file size is equal to the local file size.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnResumeUploadFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ResumeUploadFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.IO.Stream,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.IO.Stream,System.String)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.String,System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.String,System.String)">
            <summary>
            Initiates an asynchronous operation to resume uploading the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndResumeUploadFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous resume file upload operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes transferred. -1 if the remote file size is greater than the local file size. 0 if no need to resume upload because remote file size is equal to local file size.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.OnResumeDownloadFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Ftp.ResumeDownloadFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Resumes download the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeDownloadFile(System.String,System.String,System.Object)">
            <summary>
            Resumes download the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.BeginResumeDownloadFile(System.String,System.String)">
            <summary>
            Resumes download the content of the data stream to the previously interrupted remote file.
            </summary>
            <param name="localPath">The path of the local file.</param>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Ftp.EndResumeDownloadFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous ResumeDownloadFile operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes transferred, -1 if the local file size is greater than the remote file size, or 0 if no need to resume download because the remote file size is equal to the local file size.</returns>
        </member>
        <member name="E:ComponentPro.Net.Ftp.UploadFilesCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginUploadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.DownloadFilesCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginDownloadFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.MoveFilesCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginMoveFiles(System.String,System.String,ComponentPro.IO.TransferOptions,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.KeepAliveCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginKeepAlive(System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.AuthenticateCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginAuthenticate(System.String,System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.UploadFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginUploadFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.UploadUniqueFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginUploadUniqueFile(System.IO.Stream,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ReadResponseCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginReadResponse(System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SendCommandCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginSendCommand(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ClearCommandChannelCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginClearCommandChannel(System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ConnectCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginConnect(System.String,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.DisconnectCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginDisconnect(System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.GetCurrentDirectoryCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginGetCurrentDirectory(System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.DownloadFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginDownloadFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.AppendFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SetFilePermissionsCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginSetFilePermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.GetServerTimeDifferenceCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginGetServerTimeDifference(System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.SetMultipleFilesPermissionsCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginSetMultipleFilesPermissions(System.String,ComponentPro.Net.FtpFilePermissions,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.CommandResponse">
            <summary>
            Occurs when a command is sent to the server or a response is received.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.Listing">
            <summary>
            Occurs when a file and directory listing item is received by the <see cref="M:ComponentPro.Net.Ftp.ListDirectory" />, <see cref="M:ComponentPro.Net.Ftp.ListRawName" /> or <see cref="M:ComponentPro.Net.Ftp.ListName" /> methods.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Ftp" /> object is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.CertificateReceived">
            <summary>
            Occurs when an FTP server's certificate was received and verified.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.CertificateRequired">
            <summary>
            Occurs when a client certificate is required by the FTP server, or the one provided was not accepted.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>        
        </member>
        <member name="P:ComponentPro.Net.Ftp.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.CanGetStreamForWriting">
            <summary>
            Returns a field indicating whether the system support getting stream for writting data to file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.CanGetStreamForReading">
            <summary>
            Returns a field indicating whether the system support getting stream for reading data from file. For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.FileSystemFeatures">
            <summary>
            Gets supported features.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ChangeDirectoryBeforeListing">
            <summary>
            Gets or sets a boolean value indicating whether to force the <see cref="M:ComponentPro.Net.Ftp.UploadFiles" />, <see cref="M:ComponentPro.Net.Ftp.DownloadFiles" /> and <see cref="M:ComponentPro.Net.Ftp.DeleteDirectory" /> methods to change directory before listing directory.
            </summary>
            <remarks>
            When this option is set to <i>true</i>, the Ftp class changes the current working directory before listing a remote directory while transferring or deleting files.
            You can set this option to <i>true</i> for highly compatible with all FTP servers, but it takes more time 
            for changing directories in the <see cref="M:ComponentPro.Net.Ftp.UploadFiles" />, <see cref="M:ComponentPro.Net.Ftp.DownloadFiles" /> and <see cref="M:ComponentPro.Net.Ftp.DeleteDirectory" /> methods. If you are certain that your FTP server supports absolute path, this option
            can be set to <i>false</i>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ChangeDirectoryBeforeFileOperation">
            <summary>
            Gets or sets a boolean value indicating whether to force the <see cref="M:ComponentPro.Net.Ftp.UploadFiles" />, <see cref="M:ComponentPro.Net.Ftp.DownloadFiles" /> and <see cref="M:ComponentPro.Net.Ftp.DeleteDirectory" /> methods to change directory before transferring files.
            </summary>
            <remarks>
            When this option is set to <i>true</i>, the Ftp class changes the current working directory before transferring or deleting files. 
            You can set this option to <i>true</i> for highly compatible with almost FTP servers, but it takes more time 
            for changing directories in the <see cref="M:ComponentPro.Net.Ftp.UploadFiles" />, <see cref="M:ComponentPro.Net.Ftp.DownloadFiles" /> and <see cref="M:ComponentPro.Net.Ftp.DeleteDirectory" /> methods. If you are certain that your FTP server supports absolute path, this option
            can be set to <i>false</i>.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> used to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> used to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsConnectionSecured">
            <summary>
            Gets the value indicating whether the control connection is secured.
            </summary>
            <value>True if secure, false if not secure.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.KeepAliveDuringTransfer">
            <summary>
            Gets or sets a boolean value indicating whether to send NOOP command during file transfers.
            </summary>
            <remarks>
            Setting this property to true can be useful to prevent routers from prematurely closing the command channel while a long data transfer is taking place. 
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.SmartPathResolving">
            <summary>
            Gets or sets a boolean value indicating whether to enable the smart path resolving mode.
            </summary>
            <remarks>
             With the smart path resolving mode enabled, the component automatically shortens redundant remote paths before sending commands to FTP server.
            (i.e. if the current directory is '/user/test' and you download a remote file with path '/user/test/myfile.dat', the component sends 'RETR myfile.dat' command instead of 'RETR /user/test/myfile.dat'.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.KeepAliveInterval">
            <summary>
            Gets or sets the interval, in seconds, at which a NOOP command is sent on the command channel during a file transfer when the <see cref="P:ComponentPro.Net.Ftp.KeepAliveDuringTransfer"/> is enabled.
            </summary>
            <remarks>
            <p>
            Setting this property can be useful to prevent routers from prematurely closing the command channel while a long data transfer is taking place.
            </p>
            <p>
            By default this property is set to 10 minutes (600), it is generally not necessary to set a value less than 10 minutes.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint" />.
            </summary>
            <value>The local client <see cref="T:System.Net.EndPoint" />.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.MaxDownloadSpeed">
            <summary>
            Gets or sets the maximum allowed download speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed download speed.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.MaxUploadSpeed">
            <summary>
            Gets or sets the maximum allowed upload speed, in kilobytes. For unlimited speed, set this to zero.
            </summary>
            <value>Maximum allowed upload speed.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Passive">
            <summary>
            Gets or sets a boolean value indicating if the FTP client should initiate the data connection rather than the FTP server.
            </summary>
            <value>The file transfer type. Default is true (passive).</value>
            <remarks>
            <p>
            When using HTTP CONNECT proxy, this property is ignored and all transfers are passive.
            </p>
            <p>
            If set to true (Passive mode), the PASV command will be sent to the FTP server rather than the PORT command resulting in the FTP server "listening" on a data port (other than its default) and waiting for a data connection to be established by the FTP client. 
            </p>
            <p>
            If set to false (Active mode), the PORT command will be sent and the FTP client will be listening for an incoming data connection. The FTP server will establish the data connection upon receipt of a transfer command. The reply to the PASV command includes the host and port address the FTP server is listening on. 
            </p>
            <p>
            If you are having issues connecting or sending and receiving files to and from a server, try setting the Passive property to true. 
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Proxy">
            <summary>
            Gets or sets the proxy information to use for connecting and/or logging in through a proxy server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.FtpProxy" /> to use to access a remote server.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint" />.
            </summary>
            <value>The remote server <see cref="T:System.Net.EndPoint" />.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.SecureDataTransfers">
            <summary>
            Gets or sets a value which specifies whether data transfers are secure.
            </summary>
            <value>True if data transfers are secure, false if unsecure.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.ServerType">
            <summary>
            Gets the detected server type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.State">
            <summary>
            Gets the current state of the <see cref="T:ComponentPro.Net.Ftp" /> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Timeout">
            <summary>
            Gets or sets a value, in milliseconds, indicating after what period of time an FTP operation should timeout.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.TransferMode">
            <summary>
            Gets or sets the data transfer mode.
            </summary>
            <value>The file transfer mode. Default is <see cref="T:ComponentPro.Net.FtpTransferMode">Stream</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.TransferType">
            <summary>
            Gets or sets the data transfer type.
            </summary>
            <value>The file transfer type. Default is <see cref="T:ComponentPro.Net.FtpTransferType">Binary</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.UploadBlockSize">
            <summary>
            Gets or sets the size of the upload buffer. Allowed values are 2048 to 65536. Default is 0 (auto detect).
            </summary>
            <value>Upload buffer size.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.DownloadBlockSize">
            <summary>
            Gets or sets the size of the download buffer. Allowed values are 2048 to 16777216. Default is 65536.
            </summary>
            <value>Download buffer size.</value>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsBusy">
            <summary>
            Gets a boolean value indicating whether the server is busy.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection has been established.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Server">
            <summary>
            Gets the host name of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.Port">
            <summary>
            Gets the FTP port of the connected session, or 0 if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.UserName">
            <summary>
            Gets the user of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.UseUtf8">
            <summary>
            Gets or sets a boolean value indicating whether to enable UTF-8 name encoding if server supports.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.UseMlst">
            <summary>
            Gets or sets a boolean value indicating whether to enable MLST extension - server supports directory and file listings for machine processing. By default, this property is false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.SendTelnetInterruptSignal">
            <summary>
            Gets or sets a value indicating whether to send Telnet interrupt signal to an FTP server when aborting download. 
            RFC 959 and RFC 1123 recommend sending IP and Synch signals before the ABOR command. This allows an FTP server to be notified that the connection will be terminated.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Ftp.SendAbortCommand">
            <summary>
            Gets or sets a boolean value indicating whether to send the ABOR command when aborting download.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ResumeUploadFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginResumeUploadFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Ftp.ResumeDownloadFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.Net.Ftp.BeginResumeDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpException">
            <summary>
            The exception that is thrown when an error occurs while using UltimateFtp component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(ComponentPro.Net.FtpResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified <see cref="T:ComponentPro.Net.FtpResponse" />.
            </summary>
            <param name="response">The <see cref="T:ComponentPro.Net.FtpResponse" />.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String,ComponentPro.Net.FtpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.FtpExceptionStatus" /> values.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.FtpExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.FtpException.#ctor(ComponentPro.Net.FtpResponse)">FtpException (FtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpException.#ctor(System.String,System.Exception,ComponentPro.Net.FtpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpException" /> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.FtpExceptionStatus" /> values.</param>
            <remarks>The status must not be <see cref="T:ComponentPro.Net.FtpExceptionStatus">ProtocolError</see>. Use <see cref="M:ComponentPro.Net.FtpException.#ctor(ComponentPro.Net.FtpResponse)">FtpException (FtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpException.Response">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.FtpResponse" /> if <see cref="P:ComponentPro.Net.FtpException.Status" /> is <see cref="T:ComponentPro.Net.FtpExceptionStatus">ProtocolError</see>; otherwise is <b>null</b>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.FtpExceptionStatus" /> values.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.FtpException" /> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ConnectionFailed">
            <summary>
            Unable to contact the service point.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ConnectionClosed">
            <summary>
            The connection was closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.SocketError">
            <summary>
            There was an error at transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.UnknownHost">
            <summary>
            Unknown host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.NotFinished">
            <summary>
            Previous operation has not finished yet.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.ReceiveFailed">
            <summary>
            Incomplete response from the remote server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.SendFailed">
            <summary>
            Cannot send a complete request to the remote server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.InvalidResponse">
            <summary>
            Invalid FTP response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.Timeout">
            <summary>
            The operation was timed out.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.AsyncCallError">
            <summary>
            Asynchronous call error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpExceptionStatus.OperationFailed">
            <summary>
            Failed to complete the operation.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFileInfo">
            <summary>
            Represents an FTP file or directory on the remote server.
            </summary>       
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,System.String,System.String,System.Int64,ComponentPro.Net.FtpFileType,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo" /> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="fullName">The fully qualified name.</param>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.#ctor(ComponentPro.Net.Ftp,System.String,System.String,System.Int64,ComponentPro.Net.FtpFileType,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfo" /> class.
            </summary>
            <param name="fileSystem">The file system that the file belongs to.</param>
            <param name="fullName">The fully qualified name.</param>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="lastModified">The <see cref="T:System.DateTime" /> of last modification.</param>
            <param name="symlinkPath">The path this item points to if it is symlink.</param>
            <param name="group">The group name of the file.</param>
            <param name="owner">The owner name of the file.</param>
            <param name="permissions">The permissions of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.Matches(System.String)">
            <summary>
            Returns true if the file name matches the pattern which may contain * and ? wildcards.
            Matching is done without regard to case.
            </summary>
            <param name="pattern">The pattern used for comparison.</param>
            <returns>True if match; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.Matches(System.String,System.Boolean)">
            <summary>
            Returns true if the file name matches the pattern which may contain * and ? wildcards.
            </summary>
            <param name="pattern">The pattern used for comparison.</param>
            <param name="ignoreCase">A System.Boolean indicating a insensitive or case-sensitive comparison. (false indicates a case-insensitive comparison.)</param>
            <returns>True if match; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfo.Matches(ComponentPro.IO.SearchCondition)">
            <summary>
            Returns true if the file matches the specified search conditions.
            </summary>
            <param name="conditions">Search conditions.</param>
            <returns>True if match; otherwise is False.</returns>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.IsDirectory">
            <summary>
            Gets the flag indicating whether the item might be a directory.
            </summary>
            <value>True if the item might be a directory.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.IsFile">
            <summary>
            Gets the flag indicating whether the item might be a file.
            </summary>
            <value>True if the item might be a file.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.IsSymlink">
            <summary>
            Gets the flag indicating whether the item is a symlink.
            </summary>
            <value>True if the item is a symlink.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.System">
            <summary>
            Gets the file system type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.LastWriteTime">
            <summary>
            Gets the <see cref="T:System.DateTime" /> of last modification.
            </summary>
            <value>The <see cref="T:System.DateTime" /> of last modification.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.ComponentPro#IO#IFileInfo#CreationTime">
            <summary>
            Not supported property.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.ComponentPro#IO#IFileInfo#LastAccessTime">
            <summary>
            Not supported property.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
            <value>The name of the file or directory.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.FullName">
            <summary>
            Gets the fully qualified name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.FileSystem">
            <summary>
            Gets the file system that the file belongs to.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Attributes">
            <summary>
            Gets the file attributes. Only <b>Directory</b> and <b>Normal</b> are available.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Length">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink; otherwise is null.
            </summary>
            <value>The path this item points to if it is symlink; otherwise is null.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Type">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Group">
            <summary>
            Gets the group name of the item.
            </summary>
            <value>The group name of the item.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.LongName">
            <summary>
            Gets the long name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.FilePermissions">
            <summary>
            Gets the permissions of the item.
            </summary>
            <value>The permissions of the item.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.FilePermissionsEnum">
            <summary>
            Gets the permissions of the FTP file.
            </summary>
            <value>The permissions of the file represented as <see cref="T:ComponentPro.Net.FtpFilePermissions"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfo.Owner">
            <summary>
            Gets the owner of the item.
            </summary>
            <value>The owner of the item.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpFileInfoCollection">
            <summary>
            A collection of <see cref="T:ComponentPro.Net.FtpFileInfo" /> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> class with the specified file list.
            </summary>
            <param name="rawList">The unparsed FTP file list.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.#ctor(System.String[],ComponentPro.Net.FtpListingCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> class with the specified file list.
            </summary>
            <param name="rawList">The unparsed FTP file list.</param>
            <param name="listingType">Type of the listing.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Add(ComponentPro.Net.FtpFileInfo)">
            <summary>
            Adds the <see cref="T:ComponentPro.Net.FtpFileInfo" /> to the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.FtpFileInfo" /> to be added to the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <returns>A shallow copy of the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</returns>
            <remarks>
            A shallow copy of a collection copies only the elements
            of the collection, whether they are reference types or value
            types, but it does not copy the objects that the references
            refer to. The references in the new collection point to the same
            objects that the references in the original collection point to.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Contains(ComponentPro.Net.FtpFileInfo)">
            <summary>
            Determines whether the item is in the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <param name="item">The item to locate in the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</param>
            <returns>True if the item is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.CopyTo(ComponentPro.Net.FtpFileInfo[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> to a one-dimensional
            <see cref="T:ComponentPro.Net.FtpFileInfo" /> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:ComponentPro.Net.FtpFileInfo" /> array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> to a compatible one-dimensional
            <see cref="T:System.Array" />, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Filter(ComponentPro.IO.SearchCondition)">
            <summary>
            Returns the list of files in the <see cref="T:ComponentPro.Net.FtpFileInfoCollection"/> that match the specified search conditions.
            </summary>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A <see cref="T:ComponentPro.Net.FtpFileInfo"/> array containing the files in the specified directory that match the specified search conditions.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.GetTotalSize">
            <summary>
            Gets the total size of files contained in the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <returns>The total size of files contained it the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Remove(ComponentPro.Net.FtpFileInfo)">
            <summary>
            Removes the specified <see cref="T:ComponentPro.Net.FtpFileInfo" /> from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.Net.FtpFileInfo" /> to remove from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Remove(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.Net.FtpFileInfo" /> at the specified index from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Net.FtpFileInfo" /> to remove.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:ComponentPro.Net.FtpFileInfo" /> with the specified name from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <param name="name">The name of <see cref="T:ComponentPro.Net.FtpFileInfo" /> to remove from the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Sort">
            <summary>
            Sorts the items in the entire <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> alphabetically.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements, or a null reference to sort alphabetically</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)" />, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpFileInfoCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements, or a null reference to sort alphabetically.</param>
            <remarks>This method uses <see cref="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)" />, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <value>The number of elements contained in the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.FtpFileInfo" /> at the specified index.
            </summary>
            <param name="i">The zero-based index of the <see cref="T:ComponentPro.Net.FtpFileInfo" /> to get.</param>
            <value><see cref="T:ComponentPro.Net.FtpFileInfo" /> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ComponentPro.Net.FtpFileInfo" /> of the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:ComponentPro.Net.FtpFileInfo" /> to get.</param>
            <value><see cref="T:ComponentPro.Net.FtpFileInfo" /> of the specified name.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.Net.FtpFileInfoCollection" /> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpFileInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.Net.FtpFileInfoCollection" />.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpFileOs">
            <summary>
            Defines FTP file systems.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Unknown">
            <summary>
            Unknow.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Unix">
            <summary>
            Unix system.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Dos">
            <summary>
            DOS system.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.EpLf">
            <summary>
            EPLF.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Vms">
            <summary>
            VMS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.VmsError">
            <summary>
            VMS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Mlsd">
            <summary>
            MLSD.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Ibm4690">
            <summary>
            IBM.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileOs.Zos">
            <summary>
            ZOS.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFilePermissions">
            <summary>
            Specifies the FTP/Unix file permissions.
            </summary>       
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.GroupExecute">
            <summary>Group execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.GroupRead">
            <summary>Group read.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.GroupWrite">
            <summary>Group write.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.PublicExecute">
            <summary>Others (public) execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.PublicRead">
            <summary>Others (public) read.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.PublicWrite">
            <summary>Others (public) write.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.OwnerExecute">
            <summary>Owner execute.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.OwnerRead">
            <summary>Owner read.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.OwnerWrite">
            <summary>Owner write.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFilePermissions.All">
            <summary>
            All permissions.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpFileType">
            <summary>
            Specifies the type of <see cref="T:ComponentPro.Net.FtpFileInfo" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileType.File">
            <summary>
            Item is a file.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileType.Directory">
            <summary>
            Item is a directory.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpFileType.Symlink">
            <summary>
            Item is a symlink.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpListingCommand">
            <summary>
            Specifies the type of file and directory listing.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpListingCommand.List">
            <summary>
            Use LIST command (classic method).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpListingCommand.Nlst">
            <summary>
            Use NLST command (list names only, not all server support this).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpListingCommand.Mlsd">
            <summary>
            Use MLSD command - machine processing list command (modern method, not all servers support this).
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpListingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.Ftp.Listing">Listing</see> event of a <see cref="T:ComponentPro.Net.Ftp" /> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.FtpListingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.FtpListingEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Ftp.Listing">Listing</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpListingEventArgs.Cancel">
            <summary>
            Cancels the process of listing a directory. You also need to set the property <see cref="P:ComponentPro.Net.FtpListingEventArgs.Skip"/> to <i>true</i> if you do not want to have this last received item in your list.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpListingEventArgs.Skip">
            <summary>
            Skips the current item, it will not appear in the list.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpListingEventArgs.File">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.FtpFileInfo"/>. Setting this property to a null reference will remove it from the list.
            </summary>
            <value>An <see cref="T:ComponentPro.Net.FtpFileInfo"/> instance that represents an SFTP file, or <b>null</b> if not available.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpListingEventArgs.RawData">
            <summary>
            Gets the raw data of the received item line.
            </summary>
            <value>The raw data of the received item line.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpListingEventArgs.ListingCommand">
            <summary>
            Gets the listing type.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpProxy">
            <summary>
            Provides an easy way to manage communication with FTP proxy servers. This class is used for <see cref="T:ComponentPro.Net.Ftp" /> and <see cref="T:ComponentPro.Net.FtpWebRequest" /> classes.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified type, hostname, and port.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified ftp proxy type, hostname, port, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified ftp proxy type, hostname, port, and username.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="username">A user name to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified ftp proxy type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.#ctor(ComponentPro.Net.FtpProxyType,ComponentPro.Net.FtpProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpProxy" /> class with the specified proxy type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.GetProxy(System.Uri)">
            <summary>
            Returns the proxied URI for a destination.
            </summary>
            <param name="destination">The <see cref="T:System.Uri" /> of the requested FTP server.</param>
            <returns>The <see cref="T:System.Uri" /> of the FTP server if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri" /> of the proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.IsBypassed(System.Uri)">
            <summary>
            Indicates whether to use the proxy server for the specified FTP server.
            </summary>
            <param name="host">The <see cref="T:System.Uri" /> of the FTP server to check for proxy use.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.IsBypassed(System.String,System.Int32)">
            <summary>
            Indicates whether to use the proxy server for the specified FTP server.
            </summary>
            <param name="hostName">The address of the FTP server to check for proxy use.</param>
            <param name="port">The proxy port.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpProxy.ToString">
            <summary>
            Returns a string representation of this proxy.
            </summary>
            <returns>String representation of this proxy.</returns>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.AuthenticationMethod">
            <summary>
            Gets or sets the proxy server authentication method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy server for local addresses.
            </summary>
            <value><b>true</b> to bypass the proxy server for local addresses; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials" /> containing the credentials to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.Server">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.Password">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A string value representing the password used to access the FTP proxy.</value>
            <remarks>
            Set this property if you are using a Socks4, Socks5, Site (optional), or User (optional) proxy.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.Port">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.ProxyType">
            <summary>
            Gets or sets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.UserName">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A string value representing the username used to access the FTP proxy.</value>
            <remarks>
            Set this property if you are using a Socks4, Socks5, Site (optional), or User (optional) proxy.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpProxy.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpProxyHttpConnectAuthMethod">
            <summary>
            Defines types of proxy server authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyHttpConnectAuthMethod.Basic">
            <summary>
            Basic authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyHttpConnectAuthMethod.Ntlm">
            <summary>
            NTLM authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpProxyType">
            <summary>
            Defines types of proxy to use to connect to the network.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.None">
            <summary>
            No proxy.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Socks4">
            <summary>
            SOCKS4 proxy server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Socks4A">
            <summary>
            SOCKS4A proxy server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Socks5">
            <summary>
            SOCKS5 proxy server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.HttpConnect">
            <summary>
            HttpConnect proxy sends a CONNECT command to an HTTP proxy to connect to the FTP server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Site">
            <summary>
            FTP SITE proxy server. SITE command will be used.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.User">
            <summary>
            FTP USER proxy server. USER command will be used.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpProxyType.Open">
            <summary>
            FTP OPEN proxy server. OPEN command will be used.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpResponse">
            <summary>
            Represents the response of the FTP server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.Code">
            <summary>
            Gets the 3-digit response code from the response string.
            </summary>
            <value>An integer representing the response code parsed from the raw response.</value>
            <remarks>
            This property allows you to access the code parsed from the raw response. If the response from the server was "257 Directory created successfully", this property would be 257.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.InfoText">
            <summary>
            Gets the textual response without the 3-digit response code and CR/LF's.
            </summary>
            <value>A string representing the test response parsed from the raw response.</value>
            <remarks>
            This property allows you to access the informative text extracted from the raw response. If the response from the server was "257 Directory created successfully", this property would contain "Directory created successfully".
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.Group">
            <summary>
            Gets the group of the FTP response code.
            </summary>
            <value>The group of the FTP response code.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpResponse.RawResponse">
            <summary>
            Gets the RAW/complete response string received.
            </summary>
            <value>The RAW/complete response string received.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpTransferMode">
            <summary>
            Specifies the data transfer mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferMode.Block">
            <summary>Block mode (MODE B). Use data controller to transfer.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferMode.Stream">
            <summary>Stream mode (MODE S). Data is streamed to and from an FTP server.</summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferMode.ZlibCompressed">
            <summary>Compressed stream mode (MODE Z). Data is compressed before sending to an FTP server and decompressed when received from a server.</summary>
        </member>
        <member name="T:ComponentPro.Net.FtpTransferType">
            <summary>
            Specifies the FTP transfer type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferType.Ascii">
            <summary>
            ASCII transfer type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.FtpTransferType.Binary">
            <summary>
            BINARY transfer type.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.FtpWebRequest">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.Abort">
            <summary>
            Cancels an FTP request for an Internet resource. 
            </summary>
            <remarks> 
            <b>Abort</b> cancels a request for a resource. After a request is cancelled, calling
            <see cref="M:ComponentPro.Net.FtpWebRequest.GetResponse" />, <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />, <see cref="M:ComponentPro.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)" />, <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream" />,
            <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />, or <see cref="M:ComponentPro.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)" /> will cause a <see cref="T:System.Net.WebException" />
            with <see cref="P:System.Net.WebException.Status">Status</see> set to <see cref="T:System.Net.WebExceptionStatus">RequestCancelled</see>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a <see cref="T:System.IO.Stream"/> used to send file data to an Internet resource.
            </summary>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for an Internet file using FTP.
            </summary>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Completes an asynchronous stream request that was started by the <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/> method.
            </summary>
            <param name="asyncResult">Reference to the pending asynchronous request that is returned from <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/>.</param>
            <returns>If successful, returns the <see cref="T:System.IO.Stream"/> to use to write data.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Completes an asynchronous request for an Internet resource that was started with the <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> method.
            </summary>
            <param name="asyncResult">Reference to the pending asynchronous request that is returned from <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/>.</param>
            <returns>If successful, returns the <see cref="T:System.Net.WebResponse"/>.</returns>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.GetRequestStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> for writing file data to the Internet resource specified by the Uri property.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> to use to write request data.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream"/> method is called more than once.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">Bad response was received from the server.</exception>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.GetResponse">
            <summary>
            Sends a request to an Internet resource and returns a <see cref="T:System.Net.WebResponse"/> instance (file).
            </summary>
            <returns>A <see cref="T:System.Net.WebResponse"/> containing the response.</returns>
            <remarks>
            This method returns an <see cref="T:System.Net.WebResponse"/> instance containing the response from the Internet resource. 
            The actual instance returned is an instance of <see cref="T:ComponentPro.Net.FtpWebResponse"/>, and can be typecast to that class to access FTP-specific properties.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.OnCommandResponse(System.Object,ComponentPro.Net.CommandResponseEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.FtpWebRequest.CommandResponse"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.OnStateChanged(System.Object,ComponentPro.IO.RemoteFileSystemStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.FtpWebRequest.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequest.OnProgress(System.Object,ComponentPro.IO.FileSystemProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.FtpWebRequest.Progress"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:ComponentPro.Net.FtpWebRequest.CommandResponse">
            <summary>
            Occurs when a command is sent to the server or a response is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.FtpWebRequest.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Ftp" /> object is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.FtpWebRequest.Progress">
            <summary>
            Occurs when a block of data is sent or received.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.ContentLength">
            <summary>
            Gets or sets the name of the connection group for the request. This property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <value>Not supported.</value>
            <remarks>Not supported by <see cref="T:ComponentPro.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.ContentType">
            <summary>
            Gets or sets the value of the Content-type HTTP header. This property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <value>The value of the Content-type HTTP header.</value>
            <remarks>Not used by <see cref="T:ComponentPro.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Creator">
            <summary>
            Gets the instance of <see cref="T:System.Net.IWebRequestCreate"/> for registering with <b>WebRequest.Create</b>.
            </summary>
            <value>The instance of <see cref="T:System.Net.IWebRequestCreate"/>.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Credentials">
            <summary>
            Gets or sets the authentication information for the request.
            </summary>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential" /> are supported.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Headers">
            <summary>
            Gets a collection of the name/value pairs that make up the HTTP headers. This property always throws a <see cref="T:System.NotSupportedException"/>. 
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Method">
            <summary>
            Gets or sets the method for the request.
            </summary>
            <remarks>
            <p>The Method property can be set to either RETR or STOR command. PUT and GET are also supported for compatibility with HttpWebRequest.</p>
            <p>Changing the Method property after the request has been started by calling <see cref="M:ComponentPro.Net.FtpWebRequest.GetRequestStream" />, <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />, <see cref="M:ComponentPro.Net.FtpWebRequest.GetResponse" />, or <see cref="M:ComponentPro.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> method will throw an <see cref="T:System.InvalidOperationException" />.</p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.PreAuthenticate">
            <summary>
            Gets or sets a value indicating whether to send a preauthentication header with the request. This property always return <b>false</b>.
            </summary>
            <value>true to send a <b>WWW-authenticate</b> HTTP header with the initial request; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.FtpProxy"/> instance to use to proxy the request.</value>
            <remarks>
            To connect directly to the FTP server with no proxy, simply set this property to the proxy instance returned by
            the <see cref="M:System.Net.GlobalProxySelection.GetEmptyWebProxy"/> method. <see cref="T:ComponentPro.Net.FtpWebRequest"/> ignores the provided value if it is not an instance of the <see cref="T:ComponentPro.Net.FtpProxy"/> class, and no proxy used.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.RequestUri">
            <summary>
            Gets the original Uri of the request.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.Uri)" /> method.</value>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Security">
            <summary>
            Gets or sets the connection security.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebRequest.Timeout">
            <summary>
            Gets or sets the timeout value for a request.
            </summary>
            <value>The number of milliseconds to wait before the request times out.</value>
        </member>
        <member name="T:ComponentPro.Net.FtpWebRequestCreator">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.IWebRequestCreate"/> interface.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequestCreator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.FtpWebRequestCreator"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.FtpWebRequestCreator.Create(System.Uri)">
            <summary>
            Implements the <see cref="T:System.Net.IWebRequestCreate"/> interface.
            </summary>
            <param name="uri">A Uri containing the URI of the requested resource.</param>
        </member>
        <member name="T:ComponentPro.Net.FtpWebResponse">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.WebResponse"/> class.
            </summary>
            The following example demonstrates how to use <see cref="T:ComponentPro.Net.FtpWebResponse"/>
        </member>
        <member name="M:ComponentPro.Net.FtpWebResponse.Close">
            <summary>
            Cleans up resources and closes the underlying stream by calling the Stream.Close method.
            </summary>
            <remarks>
            This method closes the underlying response stream by calling the Stream.Close method and releases the connection to the FTP server.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.FtpWebResponse.GetResponseStream">
            <summary>
            Gets the file data stream from the Internet resource.
            </summary>
            <returns>A <see cref="T:System.IO.Stream" /> user to read the body of the response.</returns>
            <remarks>
            You must call either the <see cref="M:System.IO.Stream.Close" /> or the FtpWebResponse.Close method to close the stream and release the connection for reuse.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.ContentLength">
            <summary>
            Gets the length of the content returned by the request. This property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.ContentType">
            <summary>
            Gets the content type of the response. This property always returns "binary/octet-stream".
            </summary>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.Headers">
            <summary>
            Gets the headers associated with this response from the server.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection" /> containing the header information returned with the response.</value>
            <remarks><see cref="T:ComponentPro.Net.FtpWebResponse" /> always returns an empty collection.</remarks>
        </member>
        <member name="P:ComponentPro.Net.FtpWebResponse.ResponseUri">
            <summary>
            Gets the Uri of the Internet resource that responded to the request.
            </summary>
            <value>A Uri containing the URI of the Internet resource that responded to the request.</value>
        </member>
        <member name="T:ComponentPro.Net.ServerType">
            <summary>
            Specifies FTP server types.
            </summary>
        </member>
    </members>
</doc>
