<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UltimateFileSystemCF</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.IO.DiskFileInfo">
            <summary>
            Represents a file or folder on the local disk.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.IFileInfo">
            <summary>
            Defines a generalized file information.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileInfo.UpdateFullName(System.String)">
            <summary>
            Updates the fully qualified name of the file or directory. For internal uses only.
            </summary>
            <param name="newFullName">The new full name.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileInfo.Matches(ComponentPro.IO.SearchCondition)">
            <summary>
            Returns a boolean value indicating whether the file matches the specified search condition.
            </summary>
            <param name="conditions">The search condition.</param>
            <returns>true if file matches; other, false.</returns>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.Name">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.LongName">
            <summary>
            Gets the file long name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.FullName">
            <summary>
            Gets the fully qualified name of the file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:ComponentPro.IO.IFileInfo"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.IO.IFileInfo"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.IsFile">
            <summary>
            Gets a boolean value indicating whether this is a regular file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.IsDirectory">
            <summary>
            Gets a boolean value indicating whether this is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.IsSymlink">
            <summary>
            Gets a boolean value indicating whether this is a symlink.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.IsArchiveItem">
            <summary>
            Gets a boolean value indicating whether this is an archive item.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfo.FileSystem">
            <summary>
            Gets the file system that the file belongs to.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.#ctor(System.IO.FileSystemInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> from the specified <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> from the specified <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
            <param name="path">The path of the local file or directory. This file must physically exist.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.#ctor(System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> from the specified <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
            <param name="path">The path of the local file or directory. This file may or may not physically exist.</param>
            <param name="attrs">File attributes.</param>
            <param name="size">File length in bytes.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.Matches(ComponentPro.IO.SearchCondition)">
            <summary>
            Returns true if the file matches the specified search conditions.
            </summary>
            <param name="conditions">Search conditions.</param>
            <returns>True if match; otherwise is False.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfo.ToString">
            <summary>
            Returns the name of the item.
            </summary>
            <returns>The name of the item.</returns>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.Name">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.FullName">
            <summary>
            Gets the fully qualified name of the file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LongName">
            <summary>
            Gets the fully qualified name of the file or directory. Equal to <see cref="P:ComponentPro.IO.DiskFileInfo.FullName"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:ComponentPro.IO.DiskFileInfo"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.IsFile">
            <summary>
            Gets a boolean value indicating whether this is a regular file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.IsDirectory">
            <summary>
            Gets a boolean value indicating whether this is a directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:ComponentPro.IO.DiskFileInfo"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.DiskFileInfoCollection">
            <summary>
            Represents a collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/> objects.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.IFileInfoCollection">
            <summary>
            Defines a collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileInfoCollection.UnfilteredCount">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.Add(ComponentPro.IO.DiskFileInfo)">
            <summary>
            Adds the <see cref="T:ComponentPro.IO.DiskFileInfo"/> to the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.DiskFileInfo"/> to be added to the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.Contains(ComponentPro.IO.DiskFileInfo)">
            <summary>
            Determines whether the item is in the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
            <param name="item">The item to locate in the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</param>
            <returns>True if the item is located in the collection; false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/> to a compatible one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.CopyTo(ComponentPro.IO.DiskFileInfo[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/> to a one-dimensional
            <see cref="T:ComponentPro.IO.DiskFileInfo"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based <see cref="T:ComponentPro.IO.DiskFileInfo"/> array that is the destination of the elements copied from <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.Remove(ComponentPro.IO.DiskFileInfo)">
            <summary>
            Removes the specified <see cref="T:ComponentPro.IO.DiskFileInfo"/> from the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.DiskFileInfo"/> to remove from the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileInfoCollection.Remove(System.Int32)">
            <summary>
            Removes the <see cref="T:ComponentPro.IO.DiskFileInfo"/> at the specified index from the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> to remove.</param>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</value>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfoCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/> is synchronized (thread-safe).
            </summary>
            <value>A value indicating whether access to <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/> is synchronized.</value>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfoCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ComponentPro.IO.DiskFileInfo"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> to get.</param>
            <value><see cref="T:ComponentPro.IO.DiskFileInfo"/> of the specified index.</value>
        </member>
        <member name="P:ComponentPro.IO.DiskFileInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ComponentPro.IO.DiskFileInfoCollection"/>.</value>
        </member>
        <member name="T:ComponentPro.IO.DiskFileSystem">
            <summary>
            Provides useful methods for file and directory operations such as creating, transferring, renaming, deleting, etc.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystem">
            <summary>
            Base class for all types of file system including Sftp, Ftp, Scp, Local Disk and Zip.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.IFileSystem">
            <summary>
            Defines generalized file system.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Rename(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="filePath">The path of the file.</param>
            <returns>file size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetStreamForWriting(System.String,System.Int64)">
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="filePath">The name of the file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetStreamForReading(System.String,System.Int64)">
            <summary>
            Returns a Stream for reading data from the specified file.
            </summary>
            <param name="filePath">The name of the file to read.</param>
            <param name="offset">The position at which data will be read from.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileInfo(System.String)">
            <summary>
            Returns a <see cref="T:ComponentPro.IO.DiskFileInfo"/> object containing information of the specified file.
            </summary>
            <param name="path">The name of the file to get information.</param>
            <returns>A <see cref="T:ComponentPro.IO.DiskFileInfo"/> object containing information of the specified file.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateFileInfo(System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.IFileInfo"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="attrs">The file attributes.</param>
            <param name="size">The file size in bytes.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.DiskFileInfo"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path. 
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DeleteDirectory(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
            <param name="condition">The search condition.</param>
            <param name="deleteEmptyDirectory">A boolean value indicating whether to delete empty directories as well.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search condition.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search condition.</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="condition">The search condition.</param>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search condition.</param>
            <param name="path">The name of the directory to list.</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListName">
            <summary>
            Returns a list of file and directory names
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListName(System.String)">
            <summary>
            Returns a list of file and directory names
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListRawName">
            <summary>
            Returns a list of file and directory names
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ListRawName(System.String)">
            <summary>
            Returns a list of file and directory names
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySize(System.String)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <returns>The directory size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to scan files and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchConditions">The search condition.</param>
            <returns>The directory size in bytes.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the file system.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.SetCurrentDirectory(System.String)">
            <summary>
            Sets the file system's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ValidatePath(System.String,System.String)">
            <summary>
            Validates the speicified path. Path must not be a null reference or empty. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.ValidatePathCanBeEmpty(System.String,System.String)">
            <summary>
            Validates the speicified path. Path must not be a null reference. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.NormalizePath(System.String)">
            <summary>
            Normalizes a path. This will normalize path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.IsCancelling">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.IFileSystem.Cancel"/> method.
            </summary>
            <returns>true if user has called the <see cref="M:ComponentPro.IO.IFileSystem.Cancel"/> method; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.Clone">
            <summary>
            Creates a copy of the current file system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.StopThread">
            <summary>
            Stops the thread that use this instance for File Transfer operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.PauseThread">
            <summary>
            Pauses the thread that use this instance for File Transfer operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.UnpauseThread">
            <summary>
            Unpauses the thread that use this instance for File Transfer operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IFileSystem.IsThreadPaused">
            <summary>
            Returns a boolean value indicating whether the current thread is paused or not.
            </summary>
            <returns>A boolean value indicating whether the current thread is paused or not.</returns>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.ChangeDirectoryBeforeListing">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.ChangeDirectoryBeforeFileOperation">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.CanGetStreamForWriting">
            <summary>
            Returns a value indicating whether the system supports getting stream for writting data to file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.CanGetStreamForReading">
            <summary>
            Returns a value indicating whether the system supports getting stream for reading data from file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.UniqueId">
            <summary>
            Gets the unique object id.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.TransferConfirm">
            <summary>
            Occurs when an issue has been detected such as file already exists, symlink detected or an error encountered while transferring files.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IFileSystem.Progress">
            <summary>
            Occurs when a block of data is sent or received.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IFileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetDirectorySizeCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetDirectorySizeCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to calculates total size of the specified directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Initiates an asynchronous operation to calculates total size of the specified directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Initiates an asynchronous operation to calculates total size of the specified directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="recursive">true to include files and subdirectories; false to include files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndGetDirectorySize(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <b>GetDirectorySize</b> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDeleteDirectoryCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DeleteDirectoryCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean,System.String)"/> operation.
            Deletes files on the file system.
            </summary>
            <param name="path">The path of the directory that contains files to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean,System.String)"/> operation.
            Deletes files on the file system.
            </summary>
            <param name="path">The path of the directory that contains files to be deleted.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean,System.String)"/> operation.
            Deletes files on the file system.
            </summary>
            <param name="path">The path of the directory that contains files to be deleted.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)"/> operation.
            Deletes files on the file system.
            </summary>
            <param name="path">The path of the directory that contains files to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)"/> operation.
            Deletes files on the file system.
            </summary>
            <param name="path">The path of the directory that contains files to be deleted.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)"/> operation.
            Deletes files on the file system.
            </summary>
            <param name="path">The path of the directory that contains files to be deleted.</param>
            <param name="recursive">true to remove files in the specified directory and subdirectories; false to remove files in the specified directory only.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String)"/> operation.
            Deletes an empty directory with the specified pathname.
            </summary>
            <param name="remotePath">Remote directory pathname.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String)"/> operation.
            Deletes an empty directory with the specified pathname.
            </summary>
            <param name="remotePath">Remote directory pathname.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String)"/> operation.
            Deletes an empty directory with the specified pathname.
            </summary>
            <param name="remotePath">Remote directory pathname.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.DefaultFileDateTime">
            <summary>
            Default file date time.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginLoop">
            <summary>
            Begins a loop. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndLoop">
            <summary>
            Ends a loop. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsInLoop">
            <summary>
            Returns a boolean value indicating whether the file system is in a loop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EnsuresDirectoryCreated(System.String)">
            <summary>
            Ensures the specified directory exists on the file system. If the specified directory does not exist, a new one will be created.
            </summary>
            <param name="directoryPath">The directory path to check and create if needed.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CheckForCancelation">
            <summary>
            Checks whether user has cancelled the current operation. For internal uses only.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ProcessException(System.Exception)">
            <summary>
            Handles an exception.
            </summary>
            <param name="x">The exception.</param>
            <returns>The processed exception.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the file system.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)">
            <summary>
            Sets the file system's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.NormalizePath(System.String)">
            <summary>
            Normalizes a path. This will normalize path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateFileInfo(System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.IFileInfo"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="attrs">The file attributes.</param>
            <param name="size">The file size in bytes.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.IFileInfo"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean,System.String)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
            <param name="searchPattern">The search pattern.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="deleteEmptyDirectory"><b>true</b> to remove empty directories; otherwise, <b>false</b>.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path. 
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CreateDirectory(ComponentPro.IO.IFileInfo,System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path. Purposely for internal uses only.
            </summary>
            <param name="path">The directory path to create.</param>
            <param name="sourceDirectory">The source directory information.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="path">The name of the directory to list.</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.IFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListName">
            <summary>
            Returns a list of file and directory names.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListName(System.String)">
            <summary>
            Returns a list of file and directory names.
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListRawName">
            <summary>
            Returns a list of file and directory names.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ListRawName(System.String)">
            <summary>
            Returns a list of file and directory names.
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <returns>The directory size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String,System.Boolean)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to scan files and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <returns>The directory size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String,System.Boolean,System.String)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to scan files and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchPattern">The search string, such as "System*", used to search for all files beginning with the word "System".</param>
            <returns>The directory size in bytes.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition)">
            <summary>
            Returns total size of the specified directories.
            </summary>
            <param name="directoryPath">The directory path to calculate.</param>
            <param name="recursive">true to scan files and subdirectories; otherwise, false to scan for files in the specified directory only.</param>
            <param name="searchConditions">The search conditions to match against the files. (null for searching all files).</param>
            <returns>The directory size in bytes.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ValidatePath(System.String,System.String)">
            <summary>
            Validates the speicified path. Path must not be a null reference or empty. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.ValidatePathCanBeEmpty(System.String,System.String)">
            <summary>
            Validates the speicified path. Path must not be a null reference. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="filePath">The path of the file.</param>
            <returns>file size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromStreamToFile(ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Int64,ComponentPro.IO.IFileInfo,System.Int64,System.Int64)">
            <summary>
            Copies content of the specified data stream to the specified file on the local disk.
            </summary>
            <param name="sourceFile">The source file object.</param>
            <param name="destinationFile">The destination file or null.</param>
            <param name="source">The data source stream.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="destinationOffset">The destination file offset.</param>
            <param name="length">The data length.</param>
            <param name="sourceOffset">The source data offset.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromStreamToFile(ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,ComponentPro.IO.IFileInfo)">
            <summary>
            Copies content of the specified data stream to the specified file on the local disk.
            </summary>
            <param name="sourceFile">The source file object.</param>
            <param name="destinationFile">The destination file or null.</param>
            <param name="source">The data source stream.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,System.Int64,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Int64)">
            <summary>
            Transfers data contents of a file on the system to a data stream.
            </summary>
            <param name="sourceFile">The source file object.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFile">The destination file or null.</param>
            <param name="destinationStream">The destination file stream.</param>
            <param name="length">The number of bytes to transfer.</param>
            <param name="sourceOffset">The source buffer offset.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream)">
            <summary>
            Transfers data contents of a file on the system to a data stream.
            </summary>
            <param name="sourceFile">The source file object.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destFile">The destination file or null.</param>
            <param name="destinationStream">The destination file stream.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Boolean,System.Int64)">
            <summary>
            For internal uses only. Copies content of the specified file to the specified data stream.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferDataFromStreamToFile(System.IO.Stream,System.String)">
            <summary>
            Copies content of the specified data stream to the specified file on the local disk.
            </summary>        
            <param name="destinationFilePath">The destination file path on the system.</param>
            <param name="source">The source data stream.</param>
            <returns>The number of bytes transferred.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetStreamForWriting(System.String,System.Int64)">
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="filePath">The name of the file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetStreamForReading(System.String,System.Int64)">
            <summary>
            Returns a Stream for reading data from the specified file.
            </summary>
            <param name="filePath">The name of the file to read.</param>
            <param name="offset">The position at which data will be read from.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.GetFileInfo(System.String)">
            <summary>
            Returns an <see cref="T:ComponentPro.IO.IFileInfo"/> object containing information of the specified file.
            </summary>
            <param name="path">The name of the file to get information.</param>
            <returns>An <see cref="T:ComponentPro.IO.IFileInfo"/> object containing information of the specified file.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist. 
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.DeleteFile(ComponentPro.IO.IFileInfo)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist. 
            </summary>
            <param name="fileInfo">File information.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.IFileInfo,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to other file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFileName">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(System.String,System.Int64,ComponentPro.IO.FileSystem,ComponentPro.IO.IFileInfo)">
            <summary>
            Copies a file from this file system to other file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceFileSize">Length of the source file in bytes.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(System.String,System.Int64,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to other file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceFileSize">Length of the source file in bytes.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.IFileInfo,System.String,System.Int64,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to other file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="sourceFileSize">Length of the source file in bytes.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.IFileInfo,System.String,System.Int64,ComponentPro.IO.FileSystem,System.String,System.Int64,System.Int64)">
            <summary>
            Copies or resumes copy a file from this file system to other file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="sourceFileSize">Length of the source file in bytes.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffset">The destination offset.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(System.String,ComponentPro.IO.FileSystem,System.String)">
            <summary>
            Copies a file from this file system to other file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.IFileInfo,ComponentPro.IO.FileSystem,ComponentPro.IO.IFileInfo)">
            <summary>
            Copies a file from this file system to other file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyTo(ComponentPro.IO.IFileInfo,ComponentPro.IO.FileSystem,ComponentPro.IO.IFileInfo,System.Int64,System.Int64)">
            <summary>
            Copies a file from this file system to other file system starting from the specified offset.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationFile">The destination file information.</param>
            <param name="sourceOffset">The offset at which the source file will be read from.</param>
            <param name="destinationOffset">The offset at which the destination file will be writen to.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(ComponentPro.IO.FileSystem,System.String,System.String)">
            <summary>
            Copies a file from the specified file system to this file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="destinationFilePath">The destination file path.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(ComponentPro.IO.FileSystem,System.String,System.Int64,ComponentPro.IO.IFileInfo)">
            <summary>
            Copies a file from the specified file system to this file system.
            </summary>
            <param name="sourceFilePath">The source file path.</param>
            <param name="sourceFileSize">The source file size in bytes.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyFrom(ComponentPro.IO.FileSystem,ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Copies a file from the specified file system to this file system.
            </summary>
            <param name="sourceFile">The source file information.</param>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="destinationFile">The destination file information.</param>
            <returns>The number of bytes transferred</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Clone">
            <summary>
            Creates a copy of the current file system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.CopyMembersToOtherSystem(ComponentPro.IO.FileSystem)">
            <summary>
            Copies members to other file system. For internal threading uses only.
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnTransferConfirm(System.Object,ComponentPro.IO.TransferConfirmEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="M:ComponentPro.IO.FileSystem.OnTransferConfirm(System.Object,ComponentPro.IO.TransferConfirmEventArgs)"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsCancelling">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method.
            </summary>
            <returns>true if user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method; otherwise, false.</returns>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileSizeComparer">
            <summary>
            Compare two files by file sizes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileSizeComparerWithResumabilityCheck">
            <summary>
            Compare two files by file sizes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileContentComparer">
            <summary>
            Compare two files by file contents.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileContentComparerWithResumabilityCheck">
            <summary>
            Compare two files by file contents. It also allows user to check whether source file or destination file needs to resume transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileAttributesComparer">
            <summary>
            Compare two files by file attributes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileNameComparer">
            <summary>
            Compare two files by file names. Case-insensitive comparison.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileNameComparerCaseSensitive">
            <summary>
            Compare two files by file names. Case-sensitive comparison.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystem.FileLastWriteTimeComparer">
            <summary>
            Compare two files by file last write times.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnProgress(ComponentPro.IO.FileSystemProgressEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.FileSystemProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnCreateDirectoryCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.CreateDirectoryCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)"/> operation.
            Creates a directory on the server.
            </summary>
            <param name="remotePath">Pathname of the new remote directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginCreateDirectory(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)"/> operation.
            Creates a directory on the server.
            </summary>
            <param name="remotePath">Pathname of the new remote directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginCreateDirectory(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)"/> operation.
            Creates a directory on the server.
            </summary>
            <param name="remotePath">Pathname of the new remote directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.CreateDirectory(System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSetCurrentDirectoryCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SetCurrentDirectoryCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSetCurrentDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="remotePath">Path of the directory to change to.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSetCurrentDirectory(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="remotePath">Path of the directory to change to.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSetCurrentDirectory(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="remotePath">Path of the directory to change to.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndSetCurrentDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetCurrentDirectory(System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDeleteFileCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DeleteFileCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteFile(System.String)"/> operation.
            Deletes a file on the server.
            </summary>
            <param name="remotePath">The path to the file to be deleted.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteFile(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteFile(System.String)"/> operation.
            Deletes a file on the server.
            </summary>
            <param name="remotePath">The path to the file to be deleted.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDeleteFile(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteFile(System.String)"/> operation.
            Deletes a file on the server.
            </summary>
            <param name="remotePath">The path to the file to be deleted.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.DeleteFile(System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnDirectoryExistsCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.DirectoryExistsCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DirectoryExists(System.String)"/> operation.
            Detects whether the specified directory exists on the server.
            </summary>
            <param name="remotePath">The path of the remote directory to check.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDirectoryExists(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DirectoryExists(System.String)"/> operation.
            Detects whether the specified directory exists on the server.
            </summary>
            <param name="remotePath">The path of the remote directory to check.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginDirectoryExists(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.DirectoryExists(System.String)"/> operation.
            Detects whether the specified directory exists on the server.
            </summary>
            <param name="remotePath">The path of the remote directory to check.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.DirectoryExists(System.String)"/> operation.
            </summary>
            <returns>True if the directory exists, false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnFileExistsCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.FileExistsCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.FileExists(System.String)"/> operation.
            Detects whether the specified file exists on the server.
            </summary>
            <param name="remotePath">The path of the remote file to check.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginFileExists(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.FileExists(System.String)"/> operation.
            Detects whether the specified file exists on the server.
            </summary>
            <param name="remotePath">The path of the remote file to check.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginFileExists(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.FileExists(System.String)"/> operation.
            Detects whether the specified file exists on the server.
            </summary>
            <param name="remotePath">The path of the remote file to check.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.FileExists(System.String)"/> operation.
            </summary>
            <returns>True if the file exists, false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetLastWriteTimeCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetLastWriteTimeCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetLastWriteTime(System.String)"/> operation.
            Retrieves the modification date and time of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetLastWriteTime(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetLastWriteTime(System.String)"/> operation.
            Retrieves the modification date and time of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetLastWriteTime(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetLastWriteTime(System.String)"/> operation.
            Retrieves the modification date and time of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndGetLastWriteTime(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetLastWriteTime(System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A <see cref="T:System.DateTime"/> value set to date and time that the specified file was modified.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetFileLengthCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetFileLengthCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetFileLength(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileLength(System.String)"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetFileLength(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileLength(System.String)"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetFileLength(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileLength(System.String)"/> operation.
            Retrieves the size of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file. This cannot be a directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndGetFileLength(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileLength(System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The size of the specified file in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnGetFileInfoCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.GetFileInfoCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetFileInfo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileInfo(System.String)"/> operation.
            Retrieves a <see cref="T:ComponentPro.IO.IFileInfo"/> containing the information about the specified file or directory.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetFileInfo(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileInfo(System.String)"/> operation.
            Retrieves a <see cref="T:ComponentPro.IO.IFileInfo"/> containing the information about the specified file or directory.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginGetFileInfo(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileInfo(System.String)"/> operation.
            Retrieves a <see cref="T:ComponentPro.IO.IFileInfo"/> containing the information about the specified file or directory.
            </summary>
            <param name="remotePath">The path of the remote file or directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndGetFileInfo(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.GetFileInfo(System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Information about the remote file or directory.</returns>
            <remarks>Returns null if no file is found.</remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnListDirectoryCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ListDirectoryCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListDirectory(System.String)"/> operation.
            Retrieves the list of files and directories in the specified remote directory.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListDirectory(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListDirectory(System.String)"/> operation.
            Retrieves the list of files and directories in the specified remote directory.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListDirectory(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListDirectory(System.String)"/> operation.
            Retrieves the list of files and directories in the specified remote directory.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListDirectory(System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListDirectory"/> operation.
            Retrieves the list of files and directories in the specified remote directory.
            </summary>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListDirectory">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListDirectory"/> operation.
            Retrieves the list of files and directories in the specified remote directory.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndListDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListDirectory"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Collection of <see cref="T:ComponentPro.IO.IFileInfo"/> values.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnListNameCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ListNameCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified remote directory.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListName(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified remote directory.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListName(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName(System.String)"/> operation.
            Retrieves the list of file and directory names in the specified remote directory.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndListName(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListName"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>An array of lines, with each line representing a single name.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnListRawNameCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ListRawNameCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListRawName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListRawName(System.String)"/> operation.
            Retrieves the list of files and directories in the specified remote directory using a raw text format.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListRawName(System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListRawName(System.String)"/> operation.
            Retrieves the list of files and directories in the specified remote directory using a raw text format.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginListRawName(System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListRawName(System.String)"/> operation.
            Retrieves the list of files and directories in the specified remote directory using a raw text format.
            </summary>
            <param name="path">The path of the remote directory, or null for current directory.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndListRawName(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.ListRawName"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>An array of lines, with each line representing a single item.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnRenameCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.RenameCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="fromPath">The pathname of the remote file to be renamed.</param>
            <param name="toPath">The pathname to rename the file to.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginRename(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="fromPath">The pathname of the remote file to be renamed.</param>
            <param name="toPath">The pathname to rename the file to.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginRename(System.String,System.String)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> operation.
            Renames a file or directory on the file system.
            </summary>
            <param name="fromPath">The pathname of the remote file to be renamed.</param>
            <param name="toPath">The pathname to rename the file to.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndRename(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <see cref="M:ComponentPro.IO.FileSystem.Rename(System.String,System.String)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSetLastWriteTimeCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SetLastWriteTimeCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSetLastWriteTime(System.String,System.DateTime,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSetLastWriteTime(System.String,System.DateTime,System.Object)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Begins an asynchronous <see cref="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            Sets the modification date and time of the specified file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="newDateTime">The date and time to set.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndSetLastWriteTime(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous <seee cref="M:ComponentPro.IO.FileSystem.SetLastWriteTime(System.String,System.DateTime)"/> operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnThreadsCompleted(ComponentPro.IO.ThreadsCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ThreadsCompleted"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.IO.ThreadsCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnThreadCompleted(ComponentPro.IO.ThreadCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.ThreadCompleted"/> event.
            </summary>
            <param name="e">The <see cref="T:ComponentPro.IO.ThreadCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSyncApplyingChange(ComponentPro.IO.SyncApplyingChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.SyncApplyingChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSyncSkippedChange(ComponentPro.IO.SyncSkippedChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.SyncSkippedChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSyncAppliedChange(ComponentPro.IO.SyncAppliedChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.IO.SyncAppliedChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Synchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)">
            <summary>
            Synchronizes the specified local directory with the specified source directory with the specified options.
            </summary>
            <param name="localDirectory">The local directory to synchronize.</param>
            <param name="sourceDirectory">The source directory to synchronize.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the source directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Synchronize(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)">
            <summary>
            Synchronizes the specified directory on the specified destination file system with the specified source directory with the specified options.
            </summary>
            <param name="destination">The destination <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.Synchronize(ComponentPro.IO.FileSystem,ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)">
            <summary>
            Synchronizes the specified directory on the specified destination file system with the source directory on the specified source file system with the specified options.
            </summary>
            <param name="source">The source <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="destination">The destination <see cref="T:ComponentPro.IO.FileSystem"/>.</param>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.OnSynchronizeCompleted(System.IAsyncResult)">
            <summary>
            Raises the <see cref="E:ComponentPro.IO.FileSystem.SynchronizeCompleted"/> event.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSynchronize(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <param name="callback">An optional asynchronous callback to be called when the operation is complete.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSynchronize(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.Object)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <param name="state">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.BeginSynchronize(ComponentPro.IO.FileSystem,System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)">
            <summary>
            Initiates an asynchronous operation to synchronize contents of a source directory and a local directory.
            </summary>
            <param name="sourceDirectory">The path to the source directory.</param>
            <param name="destination">The destination file system.</param>
            <param name="destDirectory">The path to the local directory.</param>
            <param name="sourceIsMaster">A boolean value indicating whether the local directory is the master.</param>
            <param name="syncOptions">The <see cref="T:ComponentPro.IO.SyncOptions"/> object.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.EndSynchronize(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous folders synchronization operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.StopThread">
            <summary>
            Stops the thread that uses this instance for File Transfer operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.PauseThread">
            <summary>
            Pauses the thread that uses this instance for File Transfer operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.IsThreadPaused">
            <summary>
            Returns a boolean value indicating whether the current thread has been paused or not.
            </summary>
            <returns>A boolean value indicating whether the current thread has been paused or not.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.UnpauseThread">
            <summary>
            Unpauses the thread that uses this instance for File Transfer operations.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.IFileInfo[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or null to transfer files specified by the <paramref name="options"/> parameter.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.String,System.String[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or null to transfer files specified by the <paramref name="options"/> parameter.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="threads">The number of concurrent threads used to transfer files.</param>
            <param name="waitForThreads">A boolean value indicating whether the method will block the execution until all threads have finished.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystem.TransferFiles(ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.IFileInfo[],ComponentPro.IO.FileSystem,System.String,ComponentPro.IO.TransferOptions,System.Int32,System.Boolean)">
            <summary>
            Transfers files from the specified source file system to the specified destination file system using multiple threads.
            </summary>
            <param name="sourceFileSystem">The source file system.</param>
            <param name="sourceDirectoryPath">The path of the source directory containing files to transfer.</param>
            <param name="sourceFilesToTransfer">A list of files to transfer, or null to transfer files specified by the <paramref name="options"/> parameter.</param>
            <param name="destinationFileSystem">The destination file system.</param>
            <param name="destinationDirectoryPath">The path of the destination directory which will receive files from the source file system.</param>
            <param name="options">Specifies options for the transfer. It determines how files will be transferred.</param>
            <param name="threads">The number of concurrent threads used to transfer files.</param>
            <param name="waitForThreads">A boolean value indicating whether the method will block the execution until all threads have finished.</param>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetDirectorySizeCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginGetDirectorySize(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>       
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DeleteDirectoryCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginDeleteDirectory(System.String,System.Boolean,ComponentPro.IO.SearchCondition,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.ChangeDirectoryBeforeListing">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.ChangeDirectoryBeforeFileOperation">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.CanGetStreamForWriting">
            <summary>
            Returns a value indicating whether the system supports getting stream for writting data to file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.CanGetStreamForReading">
            <summary>
            Returns a value indicating whether the system supports getting stream for reading data from file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.TransferConfirm">
            <summary>
            Occurs when the file system has detected an issue while transferring files such as file already exists, symlink detected or an transfer error encountered.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.UniqueId">
            <summary>
            Gets the unique object id.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.Progress">
            <summary>
            Occurs when a block of data is sent or received.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.NeedProgression">
            <summary>
            For internal uses only.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.BytesPerSecondUpdateInterval">
            <summary>
            Gets or sets the number of milliseconds to update the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.BytesPerSecond"/> property. Default value is 400 ms.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.CreateDirectoryCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SetCurrentDirectoryCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginSetCurrentDirectory(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DeleteFileCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.DirectoryExistsCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.FileExistsCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginFileExists(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetLastWriteTimeCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetFileLengthCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginGetFileLength(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.GetFileInfoCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginGetFileInfo(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ListDirectoryCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginListDirectory(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ListNameCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginListName(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ListRawNameCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginListRawName(System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.RenameCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SetLastWriteTimeCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginSetLastWriteTime(System.String,System.DateTime,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystem.LastTransferStatistics">
            <summary>
            Gets the statistics of the last file transfer. It's not available for the single file transfer.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ThreadsCompleted">
            <summary>
            Occurs after all threads used to upload or download files have been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.ThreadCompleted">
            <summary>
            Occurs after the thread using this class instance has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SyncApplyingChange">
            <summary>
            Occurs when a file change is about to be tried while synchronizing files.
            </summary>
            <remarks>
            You can also handle the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event to be informed when files are to be compared, or to skip comparing files.
            </remarks>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>        
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SyncSkippedChange">
            <summary>
            Occurs when a file change is skipped while synchronizing files.
            </summary>
            <remarks>
            You can also handle the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event to be informed when files are to be compared, or to skip comparing files.
            </remarks>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>        
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SyncAppliedChange">
            <summary>
            Occurs when a file change has been applied while synchronizing files.
            </summary>
            <remarks>
            You can also handle the <see cref="E:ComponentPro.IO.FileSystem.Progress"/> event to be informed when files are to be compared, or to skip comparing files.
            </remarks>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>        
        </member>
        <member name="E:ComponentPro.IO.FileSystem.SynchronizeCompleted">
            <summary>
            Occurs after a <see cref="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.AsyncCallback,System.Object)"/> call has been completed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.IDiskCompatibleFileSystem">
            <summary>
            Defines a file system that is compatible with <see cref="T:ComponentPro.IO.DiskFileSystem"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IDiskCompatibleFileSystem.SetFileAttributes(ComponentPro.IO.IFileInfo,System.IO.FileAttributes)">
            <summary>
            Sets the specified System.IO.FileAttributes of the file on the specified path.
            </summary>
            <param name="info">The file information to set attributes.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.IDiskCompatibleFileSystem.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified System.IO.FileAttributes of the file on the specified path.
            </summary>
            <param name="file">The file path name.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.DiskFileSystem"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is a null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.Rename(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="path">The name of the file to move.</param>
            <param name="newPath">The new path for the file.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="filePath">The path of the file.</param>
            <returns>file size in bytes.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateFileInfo(System.String,System.IO.FileAttributes,System.Int64,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:ComponentPro.IO.DiskFileInfo"/> and set appropriate file information.
            </summary>
            <param name="path">The path of the file. This file may or may not exist.</param>
            <param name="attrs">The file attributes.</param>
            <param name="size">The file size in bytes.</param>
            <param name="lastWriteTime">The time the current file was last written.</param>
            <returns>The newly created <see cref="T:ComponentPro.IO.DiskFileInfo"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">The name of the directory to delete.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.TransferDataFromStreamToFile(ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Int64,ComponentPro.IO.IFileInfo,System.Int64,System.Int64)">
            <summary>
            For internal uses only. Copies content of the specified data stream to the specified file on the local disk.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.TransferDataFromStreamToFile(ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,ComponentPro.IO.IFileInfo)">
            <summary>
            For internal uses only. Copies content of the specified data stream to the specified file on the local disk.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,System.Int64,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Int64)">
            <summary>
            For internal uses only. Copies content of the specified file to the specified file on the destination file system.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.IsCancelling">
            <summary>
            Returns a boolean value indicating whether user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method.
            </summary>
            <returns>true if user has called the <see cref="M:ComponentPro.IO.FileSystem.Cancel"/> method; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.TransferDataFromFileToStream(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileSystem,ComponentPro.IO.IFileInfo,System.IO.Stream,System.Boolean,System.Int64)">
            <summary>
            For internal uses only. Copies content of the specified file to the specified data stream.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetStreamForWriting(System.String,System.Int64)">
            <summary>
            Returns a Stream for writing data to the specified file.
            </summary>
            <param name="filePath">The name of the file to write to.</param>
            <param name="offset">The position at which data will be written to.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetStreamForReading(System.String,System.Int64)">
            <summary>
            Returns a Stream for reading data from the specified file.
            </summary>
            <param name="filePath">The name of the file to read.</param>
            <param name="offset">The position at which data will be read from.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFileInfo(System.String)">
            <summary>
            Returns a <see cref="T:ComponentPro.IO.DiskFileInfo"/> object containing information of the specified file.
            </summary>
            <param name="path">The name of the file to get information.</param>
            <returns>A <see cref="T:ComponentPro.IO.DiskFileInfo"/> object containing information of the specified file.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.EnsuresDirectoryCreated(System.String)">
            <summary>
            Ensures the specified directory exists on the file system. If the specified directory does not exist, a new one will be created.
            </summary>
            <param name="directoryPath">The directory path to check.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a new directory.
            </summary>
            <param name="path">The name of the directory to create.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectory">
            <summary>
            Lists all files and subdirectories in the current working directory.
            </summary>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectory(ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectory(ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectory(System.String)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition)">
            <summary>
            Lists files and subdirectories in the current working directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="path">The name of the directory to list.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListDirectory(System.String,ComponentPro.IO.SearchCondition,System.Boolean)">
            <summary>
            Lists files and subdirectories in the specified directory that match the specified search condition.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="path">The name of the directory to list.</param>
            <param name="alwaysIncludeDirectories">A boolean value indicating whether to always include subdirectories.</param>
            <returns>A collection of <see cref="T:ComponentPro.IO.DiskFileInfo"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListName">
            <summary>
            Returns a list of file and directory names
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListName(System.String)">
            <summary>
            Returns a list of file and directory names
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListRawName">
            <summary>
            Returns a list of file and directory names
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ListRawName(System.String)">
            <summary>
            Returns a list of file and directory names
            </summary>
            <param name="path">The name of directory to list.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="directoryPath">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.NormalizePath(System.String)">
            <summary>
            Normalizes a path. This will normalize path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if separator character is '/'.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.Clone">
            <summary>
            Creates a copy of the current file system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A System.String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ValidatePath(System.String,System.String)">
            <summary>
            Validates the speicified path. Path must not be a null reference or empty. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ValidatePathCanBeEmpty(System.String,System.String)">
            <summary>
            Validates the speicified path. Path must not be a null reference. For internal uses only.
            </summary>
            <param name="path">The path to validate.</param>
            <param name="paramName">Parameter name.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ProcessException(System.Exception)">
            <summary>
            Handles an exception.
            </summary>
            <param name="x">The exception.</param>
            <returns>The processed exception.</returns>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.ToString">
            <summary>
            Returns file system's name.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ComponentPro.IO.DiskFileSystem.Default">
            <summary>
            Default <see cref="T:ComponentPro.IO.DiskFileSystem"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetFileAttributes(ComponentPro.IO.IFileInfo,System.IO.FileAttributes)">
            <summary>
            Sets the specified System.IO.FileAttributes of the file on the specified path.
            </summary>
            <param name="info">The file information to set attributes.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.DiskFileSystem.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified System.IO.FileAttributes of the file on the specified path.
            </summary>
            <param name="file">The file path name.</param>
            <param name="attributes">File attributes.</param>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.DirectorySeparators">
            <summary>
            Gets an array containing the characters that are directory separators.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.InvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.ChangeDirectoryBeforeListing">
            <summary>
            For internal uses only. Not available in this file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.ChangeDirectoryBeforeFileOperation">
            <summary>
            For internal uses only. Not available in this file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.CanGetStreamForWriting">
            <summary>
            Returns a value indicating whether the system supports getting stream for writting data to file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.CanGetStreamForReading">
            <summary>
            Returns a value indicating whether the system supports getting stream for reading data from file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.DiskFileSystem.FileSystemFeatures">
            <summary>
            Gets the supported features.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.AndFileComparer">
            <summary>
            Represents a logical AND operation on a set of <see cref="T:ComponentPro.IO.FileComparer"/> object.
            </summary>
            <seealso cref="T:ComponentPro.IO.NotFileComparer"/>
            <seealso cref="T:ComponentPro.IO.OrFileComparer"/>
        </member>
        <member name="T:ComponentPro.IO.FileComparer">
            <summary>
            Base file comparer class.
            </summary>
            <seealso cref="T:ComponentPro.IO.NotFileComparer"/>
            <seealso cref="T:ComponentPro.IO.AndFileComparer"/>
            <seealso cref="T:ComponentPro.IO.OrFileComparer"/>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
            <remarks>
            When two file objects are compared in the synchronization process, if the target file is different to the source file (Compare method returns <see cref="T:ComponentPro.IO.FileComparisonResult"/>.NotEqual), then the target file will be replaced.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_Addition(ComponentPro.IO.FileComparer,ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndFileComparer"/> object from the specified search conditions. It's similar to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_BitwiseAnd(ComponentPro.IO.FileComparer,ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndFileComparer"/> object from the specified search conditions. It equals to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_BitwiseOr(ComponentPro.IO.FileComparer,ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrFileComparer"/> object from the specified search conditions. It equals to "a OR b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileComparer.op_LogicalNot(ComponentPro.IO.FileComparer)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NotFileComparer"/> object from the specified search condition. It equals to "NOT a".
            </summary>
            <param name="a">The search condition A.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NotFileComparer"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.AndFileComparer.#ctor(ComponentPro.IO.FileComparer[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AndFileComparer"/> class.
            </summary>
            <param name="comparers">A list of file comparers.</param>
        </member>
        <member name="M:ComponentPro.IO.AndFileComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns>True if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.OrFileComparer">
            <summary>
            Represents a logical OR operation on a set of <see cref="T:ComponentPro.IO.FileComparer"/> object.
            </summary>
            <seealso cref="T:ComponentPro.IO.NotFileComparer"/>
            <seealso cref="T:ComponentPro.IO.AndFileComparer"/>
        </member>
        <member name="M:ComponentPro.IO.OrFileComparer.#ctor(ComponentPro.IO.FileComparer[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.OrFileComparer"/> class.
            </summary>
            <param name="comparers">A list of file comparers.</param>
        </member>
        <member name="M:ComponentPro.IO.OrFileComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns>True if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.NotFileComparer">
            <summary>
            Represents a logical NOT operation on a <see cref="T:ComponentPro.IO.FileComparer"/> object.
            </summary>
            <seealso cref="T:ComponentPro.IO.AndFileComparer"/>
            <seealso cref="T:ComponentPro.IO.OrFileComparer"/>
        </member>
        <member name="M:ComponentPro.IO.NotFileComparer.#ctor(ComponentPro.IO.FileComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NotSearchCondition"/> class.
            </summary>
            <param name="comparer">A file comparer.</param>
        </member>
        <member name="M:ComponentPro.IO.NotFileComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns>True if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileSizeComparer">
            <summary>
            Represents file size comparer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSizeComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSizeComparer"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSizeComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileSizeComparer"/> class that can check whether interruped file is able to be resumed.
            </summary>
            <param name="checkForResumability">True to check the resumability of source file and destination file. It simply check whether the source file size is greater than the destination file size.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSizeComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileAttributesComparer">
            <summary>
            Represents file attributes comparer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileAttributesComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileNameComparer">
            <summary>
            Represents file name comparer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileNameComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileNameComparer"/> class. Case-insensitive comparison.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileNameComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileNameComparer"/> class.
            </summary>
            <param name="ignoreCase">A System.Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.)</param>
        </member>
        <member name="M:ComponentPro.IO.FileNameComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileLastWriteTimeComparer">
            <summary>
            Represents file last write time comparer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileLastWriteTimeComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one.</returns>
        </member>
        <member name="T:ComponentPro.IO.FileContentComparer">
            <summary>
            Represents file content comparer.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileContentComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileContentComparer"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileContentComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileContentComparer"/> class that can check whether interruped file is able to be resumed.
            </summary>
            <param name="checkForResumability">True to check the resumability of source file and destination file.</param>
        </member>
        <member name="M:ComponentPro.IO.FileContentComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)">
            <summary>
            Compares two files and returns a value indicating whether one is equal to the other.
            </summary>
            <param name="x">The first file.</param>
            <param name="y">The second file.</param>
            <returns><see cref="T:ComponentPro.IO.FileComparisonResult"/>.Equal if the first file is equal to second one, <see cref="T:ComponentPro.IO.FileComparisonResult"/>.NotEqual if the first file is not equal to second one, 
            <see cref="T:ComponentPro.IO.FileComparisonResult"/>.SourceFileUnfinished if the first file may need to resume transfer, or <see cref="T:ComponentPro.IO.FileComparisonResult"/>.DestinationFileUnfinished if the second file may need to resume transfer.
            </returns>
        </member>
        <member name="T:ComponentPro.IO.FileOperationExceptionStatus">
            <summary>
            Specifies status of the error for the <see cref="T:ComponentPro.IO.FileOperationException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.OperationCancelled">
            <summary>
            The operation was cancelled.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.BothSourceAndDestinationDoNotSupportDataTransfer">
            <summary>
            Both source and destination file systems do not have file transfer functionality.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.InvalidOperation">
            <summary>
            The operation is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.AsyncCallError">
            <summary>
            Asynchrounous operation error.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.FileAlreadyExists">
            <summary>
            Existing file detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.LinkNotFound">
            <summary>
            Link not found.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.CannotCreateDirectory">
            <summary>
            Cannot create directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.OperationFailed">
            <summary>
            Operation has failed.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.LinkDetected">
            <summary>
            A symlink has been detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.RecursiveLinkDetected">
            <summary>
            A recursive symlink has been detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.TransferFailed">
            <summary>
            Transfer failed.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileOperationExceptionStatus.FileOrDirectoryNotFound">
            <summary>
            File or directory not found.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileOperationException">
            <summary>
            Represents the exception that is thrown when an error occurs while a file operation is in progress.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileOperationException"/>
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ComponentPro.IO.FileOperationException.#ctor(System.String,ComponentPro.IO.FileOperationExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileOperationException"/>
            </summary>
            <param name="message">The error message.</param>
            <param name="status">The exception status.</param>
        </member>
        <member name="M:ComponentPro.IO.FileOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileOperationException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.IO.FileOperationException.#ctor(System.String,System.Exception,ComponentPro.IO.FileOperationExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.FileOperationException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.IO.FileOperationExceptionStatus"/> values.</param>
        </member>
        <member name="P:ComponentPro.IO.FileOperationException.Status">
            <summary>
            Gets the exception status.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemFeatures">
            <summary>
            Specifies features of a file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ReconnectAfterCancel">
            <summary>
            This file system needs to be reconnected after user has cancelled an operation. For Remote File System only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ListDirectory">
            <summary>
            This file system supports listing directories.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.CopyFileFromOtherSystem">
            <summary>
            This file system supports copying files from other file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.CopyFileToOtherSystem">
            <summary>
            This file system supports copying files to other file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ResolveSymlink">
            <summary>
            This file system supports resolving symlinks.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ResumeCopyFrom">
            <summary>
            This file system supports resuming copying data from other system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.ResumeCopyTo">
            <summary>
            This file system supports resuming copying data to other system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.StoreFileAttributes">
            <summary>
            A file on this file system can store standard <see cref="T:System.IO.FileAttributes"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileSystemFeatures.All">
            <summary>
            This file system supports all features.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.FileSystemProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.FileSystemProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.ComparisonResult">
            <summary>
            Gets or sets the file comparison result in the synchronization process.
            </summary>
            <remarks>This value is only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">StartComparing</see> or <see cref="T:ComponentPro.IO.TransferState">FileCompared</see>. 
            This contains the comparison result when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is <see cref="T:ComponentPro.IO.TransferState">FileCompared</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.RemainingTime">
            <summary>
            Gets the remaining time to transfer the rest of data of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalRemainingTime">
            <summary>
            Gets the remaining time to transfer the rest files. 
            This property is only available when the <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> property of the <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.BytesPerSecond">
            <summary>
            Gets the transfer speed - the number of bytes per second.
            </summary>
            <remarks>
            To make this value accurate, we only update this property every 400 milliseconds by default. 
            This interval can be changed by setting the property <see cref="P:ComponentPro.IO.FileSystem.BytesPerSecondUpdateInterval"/>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.LastBytesTransferred">
            <summary>
            Gets the number of bytes transferred during the current transfer since the last time the event was raised.
            </summary>
            <value>The number of bytes transferred since the last time the event was raised.</value>
            <remarks>This value is only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">Uploading/Storing</see>, 
            <see cref="T:ComponentPro.IO.TransferState">Downloading/Copying/Extracting</see>, 
            or <see cref="T:ComponentPro.IO.TransferState">Comparing</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the current transfer.
            </summary>
            <value>The number of bytes transferred.</value>
            <remarks>This value is only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">Uploading/Storing</see>, 
            <see cref="T:ComponentPro.IO.TransferState">Downloading/Copying/Extracting</see>, 
            or <see cref="T:ComponentPro.IO.TransferState">Comparing</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.UserObject">
            <summary>
            Gets the user-defined state object specified in a call to BeginXXX method.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.State">
            <summary>
            Gets the transfer state.
            </summary>
            <value>The transfer state.</value>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceFileSystem">
            <summary>
            Gets the source <see cref="T:ComponentPro.IO.FileSystem"/> object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationFileSystem">
            <summary>
            Gets the destination <see cref="T:ComponentPro.IO.FileSystem">file system</see>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">
            <summary>
            Gets or sets the path of the destination file path.
            </summary>
            <remarks>
            The destination path can only be set when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">StartUploadFile/StartStoringFile</see>, 
            or <see cref="T:ComponentPro.IO.TransferState">StartDownloadFile/StartCopyingFile/StartExtractingFile</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationFileInfo">
            <summary>
            Gets the destination file info, or null if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">
            <summary>
            Gets or sets the path of the source file.
            </summary>
            <remarks>
            The destination path can only be set when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">StartUploadFile/StartStoringFile</see>, 
            or <see cref="T:ComponentPro.IO.TransferState">StartDownloadFile/StartCopyingFile/StartExtractingFile</see>.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceFileInfo">
            <summary>
            Gets the source file info, or null if not available.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePathChanged">
            <summary>
            Gets a boolean value indicating whether the source path has been changed.
            </summary>
            <remarks>
            This property is automatically changed to <c>true</c> when you set the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPathChanged">
            <summary>
            Gets a boolean value indicating whether the destination path has been changed.
            </summary>
            <remarks>
            This property is automatically changed to <c>true</c> when you set the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceOffset">
            <summary>
            Gets the source file initial offset.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationOffset">
            <summary>
            Gets the destination file or data stream initial offset.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">
            <summary>
            Gets or sets a boolean value indicating whether to skip the currently executing operation. 
            Only available when the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.State"/> property is 
            <see cref="T:ComponentPro.IO.TransferState">StartUploadFile/StartStoringFile</see>, 
            <see cref="T:ComponentPro.IO.TransferState">StartDownloadFile/StartCopyingFile/StartExtractingFile</see>, 
            <see cref="T:ComponentPro.IO.TransferState">StartComparingFile</see>, 
            <see cref="T:ComponentPro.IO.TransferState">DeletingFile</see>, or 
            <see cref="T:ComponentPro.IO.TransferState">DeletingDirectory</see>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.SourceStream">
            <summary>
            Gets the source stream object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.Length">
            <summary>
            Gets the number of bytes to transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.OutputStream">
            <summary>
            Gets the output stream object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalSize">
            <summary>
            Gets the number of total bytes to transfer. 
            This property is only available when the <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> property of the <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalBytesTransferred">
            <summary>
            Gets the number of bytes transferred since the beginning of the current multiple file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalFiles">
            <summary>
            Gets the number of files to transfer. 
            This property is only available when the <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> property of <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.FilesTransferred">
            <summary>
            Gets the number of files transferred since the beginning of the current multiple file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.FilesSkipped">
            <summary>
            Gets the number of files skipped since the beginning of the current multiple file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalBytesSkipped">
            <summary>
            Gets the number of bytes skipped since the beginning of the current multiple file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage">
            <summary>
            Gets the total file transfer progress percentage. 
            This property is only available when the <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> property of the <see cref="T:ComponentPro.IO.TransferOptions"/> object has been set to true.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemProgressEventArgs.Percentage">
            <summary>
            Gets the current file transfer progress percentage.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemTransferStatistics">
            <summary>
            Represents the statistics of a file transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalSize">
            <summary>
            Gets the number of bytes to transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.TotalFiles">
            <summary>
            Gets the number of files to transfer.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.FilesTransferred">
            <summary>
            Gets the number of files transferred successfully.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.BytesTransferred">
            <summary>
            Gets the number of bytes transferred successfully.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.FilesSkipped">
            <summary>
            Gets the number of files skipped.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.FileSystemTransferStatistics.BytesSkipped">
            <summary>
            Gets the number of bytes skipped.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.ThreadCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.ThreadCompleted">ThreadCompleted</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.ThreadCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.ThreadsCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.ThreadsCompleted">ThreadsCompleted</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.ThreadsCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.ThreadsCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.ThreadsCompleted"/> event.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.ThreadCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.ThreadCompleted"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ThreadCompletedEventArgs.FileSystem">
            <summary>
            Gets the class instance that the thread used for the File Transfer operations.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.ThreadCompletedEventArgs.LastException">
            <summary>
            Gets the last exception.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileComparisonResult">
            <summary>
            Represents the file comparison result.
            This result enum is used for the property <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.ComparisonResult"/>.
            </summary>
            <seealso cref="E:ComponentPro.IO.FileSystem.Progress"/>        
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.Default">
            <summary>
            Default value. Only used by <see cref="M:ComponentPro.IO.FileSystem.Synchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)"/>/<see cref="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.AsyncCallback,System.Object)"/>, this default value means the synchronizer will use the <see cref="P:ComponentPro.IO.SyncOptions.Comparer"/> to compare files.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.Equal">
            <summary>
            Source file and destination file are equal.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.NotEqual">
            <summary>
            Source file and destination file are different.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileComparisonResult.Resumable">
            <summary>
            Destination file is not completely copied. This is used for <see cref="T:ComponentPro.IO.FileContentComparer"/> only.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SymlinksResolveAction">
            <summary>
            Specifies actions taken on symlinks.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.Follow">
            <summary>
            Resolve and follow the symlink.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.Skip">
            <summary>
            Skip the symlink.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SymlinksResolveAction.Confirm">
            <summary>
            Raise the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event to confirm next action on the symlink.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileExistsResolveAction">
            <summary>
            Specifies actions to resolve file existing issue.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.Confirm">
            <summary>
            Raise the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event to confirm next action on an existing file.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.SkipAll">
            <summary>
            Skip all existing files.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.OverwriteAll">
            <summary>
            Overwrite all existing files.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.OverwriteOlderFiles">
            <summary>
            Overwrite existing files if they are older than source files.
            If the File System is SFTP or FTP, using this mode is not recommended because modification dates are often misreported by FTP and SFTP servers, making this mode unreliable.
            We strongly recommend to use the <b>CustomCompare</b> mode and set the <see cref="F:ComponentPro.IO.TransferOptions.Comparer"/> property to a <see cref="T:ComponentPro.IO.FileComparer">file comparer</see> or develop a custom solution using the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.OverwriteFilesWithDifferentSizes">
            <summary>
            Overwrite existing files with different sizes.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.CustomCompare">
            <summary>
            Use <see cref="F:ComponentPro.IO.TransferOptions.Comparer"/> to compare source and destination files. If the <see cref="M:ComponentPro.IO.FileComparer.Compare(ComponentPro.IO.IFileInfo,ComponentPro.IO.IFileInfo)"/> method returns <b>true</b>, the existing will be skipped; otherwise it will be overwritten.
            </summary>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileAttributesComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileContentComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileLastWriteTimeComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileNameComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileSizeComparer"/>
        </member>
        <member name="F:ComponentPro.IO.FileExistsResolveAction.ResumeFileTransfer">
            <summary>
            Resume file transfer. Not available in file move mode.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferOptions">
            <summary>
            Provides options to determine how files will be transferred.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer">
            <summary>
            Gets or sets a boolean value indicating whether to retrieve directory structure before transferring files.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.Recursive">
            <summary>
            Gets or sets a boolean value indicating whether to allow scanning subdirectories for files to transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.ScanSubDirectoriesMatchedSearchCondition">
            <summary>
            Scan subdirectories that match the <see cref="F:ComponentPro.IO.TransferOptions.SearchCondition">search condition</see>for files to transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.CreateEmptyDirectories">
            <summary>
            Gets or sets a boolean value indicating whether to allow copying empty directories from the source file system to the destination file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.SymlinksResolveAction">
            <summary>
            Specifies action taken when a symlink has been found.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.FileExistsResolveAction">
            <summary>
            Specifies action taken when the destination file already exists.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.SearchCondition">
            <summary>
            Specifies search condition.
            </summary>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.NotSearchCondition"/>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.Comparer">
            <summary>
            Specifies a custom file comparer to compare source and destination files to determine whether to overwrite the existing destination file. It can only be used when the field <see cref="F:ComponentPro.IO.TransferOptions.FileExistsResolveAction"/> of a transfer option object was set to <see cref="T:ComponentPro.IO.FileExistsResolveAction">CustomCompare</see>.
            </summary>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileAttributesComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileLastWriteTimeComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileNameComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileSizeComparer"/>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.SetFileDateTime">
            <summary>
            Gets or sets a boolean value indicating whether to synchronize destination file last write time with the source file on the source file system.
            </summary>
            <remarks>
            This option does not take effects on file systems that implement the <see cref="T:ComponentPro.IO.IDiskCompatibleFileSystem"/> interface. 
            These file systems automatically synchronize attributes and last write time of the destination file with the source file when copying.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.FailedOnSetFileDateTimeError">
            <summary>
            Gets or sets a boolean value indicating whether to raise an error when the File System has failed to set file date time of a file. Default value is false.
            </summary>
            <remarks>
            This option does not take effects on file systems that implement the <see cref="T:ComponentPro.IO.IDiskCompatibleFileSystem"/> interface. 
            These file systems automatically synchronize attributes and last write time of the destination file with the source file when copying.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.SrcConnectionParameters">
            <summary>
            Specifies source file system's connection parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see> only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.SrcAuthenticationParameters">
            <summary>
            Specifies source file system's authentication parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see> only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.DestConnectionParameters">
            <summary>
            Specifies source file system's connection parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see> only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.DestAuthenticationParameters">
            <summary>
            Specifies source file system's authentication parameters. This option is for <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see> only.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.MoveFiles">
            <summary>
            Gets or sets a boolean value indicating whether to move files from the source directory on the source file system to the destination directory on the destination file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.DeleteEmptyDirectories">
            <summary>
            Gets or sets a boolean value indicating whether to delete empty directories when moving files and directories or transferring files and directories with <see cref="F:ComponentPro.IO.TransferOptions.MoveFiles"/> enabled. Default value is true - empty directories are to be deleted.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferOptions.SearchConditionCombinedWithMasksInSourcePath">
            <summary>
            Gets or sets a boolean value indicating whether to combine (<see cref="T:ComponentPro.IO.AndSearchCondition">AND logical operator</see>) the wildcard masks found in a specified source path with the search condition in this transfer option object.
            </summary>
            <remarks>
            <p>
            If the source path does not contain wildcard masks, this field is ignored.
            </p>
            <p>
            If the source path contains wild card masks, and this field is set to <b>true</b>, then the <see cref="T:ComponentPro.IO.AndSearchCondition">AND logical operator</see> is used; otherwise if this field is set to <b>false</b>, the <see cref="T:ComponentPro.IO.OrSearchCondition">OR logical operator</see> is used.
            For example, you specify "C:\temp\*.tmp" as the source path and your <see cref="F:ComponentPro.IO.TransferOptions.SearchCondition"/> is <see cref="T:ComponentPro.IO.AttributeSearchCondition"/>(<see cref="T:System.IO.FileAttributes"/>.Hidden). 
            If this field is true, the FileSystem will search for all hidden files with .tmp extensions; false means the FileSystem will search for files with .tmp extensions or with hidden attributes.
            </p>
            </remarks>
            <value>
            Default value is false.
            </value>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,ComponentPro.IO.FileComparer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            </summary>
            <param name="buildTree">Indicates whether the directory tree should be retrieved before tranferring files. By setting this property to true, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be made available.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="createEmptyDirectory">Allow creating empty directories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="comparer">Specifies a custom file comparer to compare source and destination files to determine whether to overwrite the existing destination file.</param>
            <param name="setFileDateTime">Indicates whether to synchronize destination file's last write time with the source file's last write time.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,ComponentPro.IO.SearchCondition,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            </summary>
            <param name="buildTree">Indicates whether the directory tree should be retrieved before tranferring files. By setting this property to true, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be made available.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="createEmptyDirectory">Allow creating empty directories.</param>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="setFileDateTime">Indicates whether to synchronize destination file's last write time with the source file's last write time.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,ComponentPro.IO.FileComparer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            </summary>
            <param name="buildTree">Indicates whether the directory tree should be retrieved before tranferring files. By setting this property to true, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be made available.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="createEmptyDirectory">Allow creating empty directories.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="comparer">Specifies a custom file comparer to compare source and destination files to determine whether to overwrite the existing destination file.</param>
            <param name="setFileDateTime">Indicates whether to synchronize destination file's last write time with the source file's last write time.</param>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,ComponentPro.IO.FileExistsResolveAction,ComponentPro.IO.SymlinksResolveAction,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            This constructor sets <see cref="F:ComponentPro.IO.TransferOptions.Comparer"/> to null reference.
            </summary>
            <param name="buildTree">Indicates whether the directory tree should be retrieved before tranferring files. By setting this property to true, the <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.TotalPercentage"/> property will be made available.</param>
            <param name="recursive">Indicates whether all files and subdirectories will be transferred.</param>
            <param name="createEmptyDirectory">Allow creating empty directories.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="symlinksResolveAction">Specifies the action taken on symlinks.</param>
            <param name="setFileDateTime">Indicates whether to synchronize destination file's last write time with the source file's last write time.</param>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(ComponentPro.IO.SearchCondition,ComponentPro.IO.FileExistsResolveAction,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            This constructor sets <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.Recursive"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.CreateEmptyDirectories"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.SymlinksResolveAction"/> to <see cref="T:ComponentPro.IO.SymlinksResolveAction">Skip</see> and <see cref="F:ComponentPro.IO.TransferOptions.Comparer"/> to null reference.
            </summary>
            <param name="searchCondition">The search conditions to match against the files. (null for searching all files).</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="setFileDateTime">Indicates whether to synchronize destination file's last write time with the source file's last write time.</param>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor(System.String,ComponentPro.IO.FileExistsResolveAction,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            This constructor sets <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.Recursive"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.CreateEmptyDirectories"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.SymlinksResolveAction"/> to <see cref="T:ComponentPro.IO.SymlinksResolveAction">Skip</see> and <see cref="F:ComponentPro.IO.TransferOptions.Comparer"/> to null reference.
            </summary>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="fileExistsResolveAction">Specifies the action taken on existing files.</param>
            <param name="setFileDateTime">Indicates whether to synchronize destination file's last write time with the source file's last write time.</param>
        </member>
        <member name="M:ComponentPro.IO.TransferOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TransferOptions"/> class.
            This constructor sets <see cref="F:ComponentPro.IO.TransferOptions.BuildDirectoryTreeBeforeTransfer"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.Recursive"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.CreateEmptyDirectories"/> to true, <see cref="F:ComponentPro.IO.TransferOptions.SearchCondition"/> to null reference (search all files), <see cref="F:ComponentPro.IO.TransferOptions.FileExistsResolveAction"/> to <see cref="T:ComponentPro.IO.FileExistsResolveAction">OverwriteAll</see>, <see cref="F:ComponentPro.IO.TransferOptions.SymlinksResolveAction"/> to <see cref="T:ComponentPro.IO.SymlinksResolveAction">Skip</see>, <see cref="F:ComponentPro.IO.TransferOptions.Comparer"/> to null reference, and <see cref="F:ComponentPro.IO.TransferOptions.SetFileDateTime"/> to false.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SourceDestinationFileSystemsPair">
            <summary>
            Represents a pair of source and destination file systems returned by a multi-thread file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SourceDestinationFileSystemsPair.Source">
            <summary>
            Specifies the source file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SourceDestinationFileSystemsPair.Destination">
            <summary>
            Specifies the destination file system.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.CanGetStreamResult">
            <summary>
            Defines checking result for the <see cref="M:ComponentPro.IO.FileSystem.GetStreamForWriting(System.String,System.Int64)"/> and <see cref="M:ComponentPro.IO.FileSystem.GetStreamForReading(System.String,System.Int64)"/> methods of a file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.CanGetStreamResult.Yes">
            <summary>
            The file system absolutely supports the requested feature.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.CanGetStreamResult.No">
            <summary>
            The file system does not support the requested feature.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.CanGetStreamResult.TargetFirst">
            <summary>
            The file transferrer should check this feature on the target file system first.
            </summary>        
        </member>
        <member name="T:ComponentPro.IO.IRemoteFileSystem">
            <summary>
            Defines generalized remote file system.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote server.
            </summary>
            <param name="server">The server address - either a hostname or a dotted string address.</param>
            <param name="port">The server port (eg. 21).</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Connect(System.Object[])">
            <summary>
            For internal uses only.
            </summary>
            <param name="parameters">The connection parameters.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Disconnect">
            <summary>
            Disconnects.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the remote server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.Authenticate(System.Object[])">
            <summary>
            For internal uses only.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetConnectionParameters">
            <summary>
            Gets the current connection parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.IRemoteFileSystem.GetAuthenticationParameters">
            <summary>
            Gets the current authentication parameters.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.IsConnected">
            <summary>
            Gets a boolean value indicating whether the connection has been established.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.IsBusy">
            <summary>
            Gets a boolean value indicating whether the server is busy.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.Server">
            <summary>
            Gets the server name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.Port">
            <summary>
            Gets the port number.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.State">
            <summary>
            Gets the current state of the remote file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.IRemoteFileSystem.ServerOs">
            <summary>
            Gets the server's OS.
            </summary>
        </member>
        <member name="E:ComponentPro.IO.IRemoteFileSystem.StateChanged">
            <summary>
            Occurs when the state of the remote file system is changed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.RemoteFileSystemState">
            <summary>
            Specifies the state of an <see cref="T:ComponentPro.IO.IRemoteFileSystem">remote file system</see> object.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Disconnected">
            <summary>
            Not connected to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Connecting">
            <summary>
            Connecting to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Connected">
            <summary>
            Connected to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Idle">
            <summary>
            Server is ready to process commands.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Sending">
            <summary>
            Sending command to the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Reading">
            <summary>
            Reading response from the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Processing">
            <summary>
            Processing response from the server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteFileSystemState.Disposed">
            <summary>
            Remote File System object is disposed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.FileSystemPath">
            <summary>
            Performs operations on System.String instances that contain remote file or directory path information.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.MaskToRegex(System.String,System.Boolean)">
            <summary>
            Converts mask to regex.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="caseSensitive">Specifies case-insensitive matching.</param>
            <returns>A <see cref="T:System.Text.RegularExpressions.Regex"/> object.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified remote path string contains absolute
            or relative path information.
            </summary>
            <param name="remotePath">The path to test.</param>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
            <remarks>
            This method is recommended for remote file system only.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.NormalizePath(System.String)">
            <summary>
            Normalizes a remote path. This will normalize path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file".
            </summary>
            <param name="remotePath">The remote path.</param>
            <returns>Normalized path.</returns>
            <remarks>
            This method is recommended for remote file system only.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.NormalizePath(System.String,System.Char)">
            <summary>
            Normalizes a remote path. This will normalize path like "\my folder\\my sub folder/sub folder/\my file" to "/my folder/my sub folder/sub folder/my file" if separator character is '/'.
            </summary>
            <param name="remotePath">The remote path.</param>
            <param name="separator">The path separator character. This can only be '/' or '\' character. For remote paths, '/' character is usually used.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.Combine(System.String,System.String,System.Char)">
            <summary>
            Combines two remote path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <param name="separator">The path separator character.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.Combine(System.String,System.String)">
            <summary>
            Combines two remote path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.EncloseWithQuotes(System.String)">
            <summary>
            Encloses the provided remote path with quotes.
            </summary>
            <param name="remotePath">The remote path.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateLocalPath(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The local path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateLocalPathCanBeEmpty(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The local path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateRemotePath(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null or empty).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.ValidateRemotePathCanBeEmpty(System.String,System.String)">
            <summary>
            Checks to see whether the provided path is valid (it cannot be null).
            </summary>
            <param name="path">The remote path.</param>
            <param name="paramName">The parameter for exceptions.</param>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetRemoteDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path string.</summary>
            <returns>A <see cref="T:System.String"></see> containing directory information for path. Returns <see cref="F:System.String.Empty"></see> if path does not contain directory information.</returns>
            <param name="path">The path of a file or directory. </param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.GetRemoteFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary>
            <returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ComponentPro.IO.FileSystemPath.SplitPath(System.String,System.String@,System.String@)">
            <summary>
            Splits a path into directory name and file name.
            </summary>
            <param name="path">The input path.</param>
            <param name="directoryName">The output directory name.</param>
            <param name="fileName">The output file name.</param>
        </member>
        <member name="T:ComponentPro.IO.RemoteServerOs">
            <summary>
            Specifies the server OS type.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteServerOs.Unknown">
            <summary>
            Unknow server type.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteServerOs.Windows">
            <summary>
            Windows server.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.RemoteServerOs.Unix">
            <summary>
            UNIX server.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchConditionResult">
            <summary>
            Defines search condition matching result. It indicates if a file item was accepted or rejected by a search condition.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionResult.Yes">
            <summary>
            The file was accepted.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionResult.No">
            <summary>
            The file was rejected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionResult.OutOfScope">
            <summary>
            The file was out of scope.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchCondition">
            <summary>
            A base class that all Search Condition classes must derive from to check whether a file matches the specified search conditions.
            </summary>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.#ctor(ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.SearchCondition"/> class.
            </summary>
            <param name="fileTypes">The file types to search.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ToString">
            <summary>
            Converts to a string object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item matches the search condition.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Matches(ComponentPro.IO.IFileInfo,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Returns a boolean value indicating whether the item matches the search condition and the specified file type.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
            <param name="fileTypes">The file type to search for.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_Subtraction(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrSearchCondition"/> object from the specified search conditions. It equals to "a AND NOT b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesFileType(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item's type matches the search condition's file type.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesAllConditions(ComponentPro.IO.IFileInfo,ComponentPro.IO.SearchCondition[])">
            <summary>
            Checks whether the specified file item matches all the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <returns>true if item matches the conditions or does not apply to the conditions; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesAllConditions(ComponentPro.IO.IFileInfo,ComponentPro.IO.SearchCondition[],ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Checks whether the specified file item matches all the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <param name="fileTypes">The file type.</param>
            <returns>true if item matches the conditions or does not apply to the conditions; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesOneCondition(ComponentPro.IO.IFileInfo,ComponentPro.IO.SearchCondition[])">
            <summary>
            Checks whether the specified file item matches at least one of the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <returns>true if item matches at least one of the conditions or does not apply to the conditions; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.MatchesOneCondition(ComponentPro.IO.IFileInfo,ComponentPro.IO.SearchCondition[],ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Checks whether the specified file item matches at least one of the specified search conditions.
            </summary>
            <param name="file">The file item to check.</param>
            <param name="conditions">The search conditions.</param>
            <param name="fileTypes">The file type.</param>
            <returns>true if item matches at least one of the conditions or does not apply to the conditions; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.And(ComponentPro.IO.SearchCondition[])">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndSearchCondition"/> object from the specified search conditions.
            </summary>
            <param name="searchConditions">The search conditions.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndSearchCondition"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Or(ComponentPro.IO.SearchCondition[])">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrSearchCondition"/> object from the specified search conditions.
            </summary>
            <param name="searchConditions">The search conditions.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrSearchCondition"/>.</returns>
            <seealso cref="T:ComponentPro.IO.NameSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AttributeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.SizeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.OrSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.TimeSearchCondition"/>
            <seealso cref="T:ComponentPro.IO.AndSearchCondition"/>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_Addition(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndSearchCondition"/> object from the specified search conditions. It's similar to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_BitwiseAnd(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.AndSearchCondition"/> object from the specified search conditions. It equals to "a AND b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.AndSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_BitwiseOr(ComponentPro.IO.SearchCondition,ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.OrSearchCondition"/> object from the specified search conditions. It equals to "a OR b".
            </summary>
            <param name="a">The search condition A.</param>
            <param name="b">The search condition B.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.OrSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.op_LogicalNot(ComponentPro.IO.SearchCondition)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NotSearchCondition"/> object from the specified search condition. It equals to "NOT a".
            </summary>
            <param name="a">The search condition A.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NotSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ModifiedBefore(System.DateTime)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all files with modified date and time before the specified date and time.
            </summary>
            <param name="before">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ModifiedAfter(System.DateTime)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all files with modified date and time after the specified date and time.
            </summary>
            <param name="after">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.ModifiedBetween(System.DateTime,System.DateTime)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.TimeSearchCondition"/> object that filters all files with modified date and time between the specified period of time.
            </summary>
            <param name="from">The date and time value used to filter files.</param>
            <param name="to">The date and time value used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.TimeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeEqualTo(System.Int64)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all files with size equal to the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeGreaterThan(System.Int64)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all files with size greater than the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeLessThan(System.Int64)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all files with size less than the specified size.
            </summary>
            <param name="size">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.SizeBetween(System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.SizeSearchCondition"/> object that filters all files with size between the specified size.
            </summary>
            <param name="from">The file size used to filter files.</param>
            <param name="to">The file size used to filter files.</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.SizeSearchCondition"/>.</returns>
        </member>
        <member name="M:ComponentPro.IO.SearchCondition.Masks(System.String)">
            <summary>
            Creates a new <see cref="T:ComponentPro.IO.NameSearchCondition"/> object that filters all files that match the specified masks in name.
            </summary>
            <param name="fileMasks">Mask to use to scan file names (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "*.exe|*.dll"...).</param>
            <returns>A newly created <see cref="T:ComponentPro.IO.NameSearchCondition"/>.</returns>
        </member>
        <member name="P:ComponentPro.IO.SearchCondition.FileTypes">
            <summary>
            Gets or sets the file type to search for.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchConditionFileTypes">
            <summary>
            Specifies search file types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.Any">
            <summary>
            Any file types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.Directory">
            <summary>
            Directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.FileOrDirectory">
            <summary>
            Equals to File Or Directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTypes.Symlink">
            <summary>
            Symlink.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.AndSearchCondition">
            <summary>
            Represents a logical AND operation on a set of <see cref="T:ComponentPro.IO.SearchCondition"/> object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.AndSearchCondition.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AndSearchCondition"/> class.
            </summary>
            <param name="conditions">A list of search conditions.</param>
        </member>
        <member name="M:ComponentPro.IO.AndSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item matches all of the search conditions.
            </summary>
            <param name="item">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.AndSearchCondition.Conditions">
            <summary>
            Gets a list of search conditions that will be used to check <see cref="T:ComponentPro.IO.IFileInfo"/> items.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.AndSearchCondition.FileTypes">
            <summary>Gets or sets the file type of the search condition.</summary>
        </member>
        <member name="T:ComponentPro.IO.AttributeSearchCondition">
            <summary>
            Search an <see cref="T:ComponentPro.IO.IFileInfo"/> object based on its attributes.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.AttributeSearchCondition.#ctor(System.IO.FileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AttributeSearchCondition"/> class.
            </summary>
            <param name="attributes">Attributes used to search items.</param>
        </member>
        <member name="M:ComponentPro.IO.AttributeSearchCondition.#ctor(System.IO.FileAttributes,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AttributeSearchCondition"/> class.
            </summary>
            <param name="attributes">Attributes used to search items.</param>
            <param name="fileType">Determines whether the condition applies to files, folders or both.</param>
        </member>
        <member name="M:ComponentPro.IO.AttributeSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item matches at least of the file attributes.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.AttributeSearchCondition.Attributes">
            <summary>
            Gets the file attributes.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.NameSearchCondition">
            <summary>
            Search for files that match the specified filemasks in name.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks. This will search for both file and directory.
            </summary>
            <param name="fileMasks">Mask to use to scan file names (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "*.exe|*.dll"...).</param>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.ToString">
            <summary>
            Converts the object to string.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks.
            </summary>
            <param name="fileMasks">Mask to use to scan file names (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "*.exe|*.dll"...).</param>
            <param name="ignoreCase">A boolean value indicating to ignore case when comparing file names.</param>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.#ctor(System.String,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> with the specified filemasks.
            </summary>
            <param name="fileMasks">Mask to use to scan file names (e.g. "*.txt", "a??.txt", "*.txt;*.doc", "*.exe|*.dll"...). File masks are delimited by ';', '|', and ',' characters. If the fileMasks parameter starts with ':', the search will be case sensitive.</param>
            <param name="fileTypes">Determines whether the condition applies to files, folders or both.</param>
        </member>
        <member name="M:ComponentPro.IO.NameSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item matches at least of the filemasks.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.NameSearchCondition.IgnoreCase">
            <summary>
            Gets or sets a boolean value indicating whether the file or folder name matching is not case-sensitive.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.NameSearchCondition.FileMasks">
            <summary>
            Gets an array of filemasks.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.NotSearchCondition">
            <summary>
            Represents a logical NOT operation on a <see cref="T:ComponentPro.IO.SearchCondition"/> object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.NotSearchCondition.#ctor(ComponentPro.IO.SearchCondition)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.NotSearchCondition"/> class.
            </summary>
            <param name="condition">A search condition.</param>
        </member>
        <member name="M:ComponentPro.IO.NotSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item does not match the search conditions.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.NotSearchCondition.Condition">
            <summary>
            Gets the search conditions that will be used to check <see cref="T:ComponentPro.IO.IFileInfo"/> item.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.NotSearchCondition.FileTypes">
            <summary>
            Gets or sets the file type of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.OrSearchCondition">
            <summary>
            Represents a logical OR operation on a set of <see cref="T:ComponentPro.IO.SearchCondition"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.OrSearchCondition.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.OrSearchCondition"/> class.
            </summary>
            <param name="conditions">Search conditions that will be used for the logical OR operation.</param>
        </member>
        <member name="M:ComponentPro.IO.OrSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item matches at least one of the search conditions.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.OrSearchCondition.Conditions">
            <summary>
            Gets the conditions for the operation.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.OrSearchCondition.FileTypes">
            <summary>
            Gets or sets the file type of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SearchConditionFileTimeTypes">
            <summary>
            Specifies the search file time types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.All">
            <summary>
            All file time types.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.Creation">
            <summary>
            Check creation time.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.LastAccess">
            <summary>
            Check last access time.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SearchConditionFileTimeTypes.LastWrite">
            <summary>
            Check last write time.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TimeSearchCondition">
            <summary>
            Search an <see cref="T:ComponentPro.IO.IFileInfo"/> object based on its file time.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> that use file last write time to check.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTimeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> with the specified file time type.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="applicableDateTimes">The file time type to check.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> that use file last write time to check.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="fileTypes">The file types to check.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.#ctor(System.DateTime,System.DateTime,ComponentPro.IO.SearchConditionFileTimeTypes,ComponentPro.IO.SearchConditionFileTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.TimeSearchCondition"/> with the specified file time type.
            </summary>
            <param name="from">The minimum date and time of the search condition.</param>
            <param name="to">The maximum date and time of the search condition.</param>
            <param name="applicableDateTimes">The file time type to check.</param>
            <param name="fileTypes">The search file types.</param>
        </member>
        <member name="M:ComponentPro.IO.TimeSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item's time is within the specified period of time.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.SearchConditionFileTimeTypes">
            <summary>
            Gets the file time type.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.To">
            <summary>
            Gets the maximum date and time of the search condition.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TimeSearchCondition.From">
            <summary>
            Gets the minimum date and time of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SizeSearchCondition">
            <summary>
            Search an <see cref="T:ComponentPro.IO.IFileInfo"/> object based on its file size.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.SizeSearchCondition.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.IO.AttributeSearchCondition"/> class.
            </summary>
            <param name="maxSize">The maximum file size.</param>
            <param name="minSize">The minimum file size.</param>
        </member>
        <member name="M:ComponentPro.IO.SizeSearchCondition.Matches(ComponentPro.IO.IFileInfo)">
            <summary>
            Returns a boolean value indicating whether the item's size is within the specified size range.
            </summary>
            <param name="file">The <see cref="T:ComponentPro.IO.IFileInfo"/> to check.</param>
        </member>
        <member name="P:ComponentPro.IO.SizeSearchCondition.MaxSize">
            <summary>
            Gets the maximum size value of the search condition.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SizeSearchCondition.MinSize">
            <summary>
            Gets the minimum size value of the search condition.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.RemoteFileSystemStateChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.IRemoteFileSystem.StateChanged"/> event of an <see cref="T:ComponentPro.IO.IRemoteFileSystem"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.RemoteFileSystemFileSystem.StateChanged">StateChanged</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs.State">
            <summary>
            Gets the new state.
            </summary>
            <value>The new and current state.</value>
        </member>
        <member name="P:ComponentPro.IO.RemoteFileSystemStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
            <value>The state that was changed.</value>
        </member>
        <member name="T:ComponentPro.IO.SyncAppliedChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange">SyncAppliedChange</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.SyncAppliedChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.SyncAppliedChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange">SyncAppliedChange</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncAppliedChangeEventArgs.ChangeType">
            <summary>
            Gets the type of change that was applied.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncAppliedChangeEventArgs.NewFile">
            <summary>
            Gets the information of the new file that was changed.
            </summary>
            <remarks>
            This property is set to a null reference when <see cref="P:ComponentPro.IO.SyncAppliedChangeEventArgs.ChangeType"/> is Delete.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.SyncAppliedChangeEventArgs.OldFile">
            <summary>
            Gets the information of the old file that was changed.
            </summary>
            <remarks>
            When <see cref="P:ComponentPro.IO.SyncAppliedChangeEventArgs.ChangeType"/> is Delete. This property contains information about the file for the removal.
            </remarks>
        </member>
        <member name="T:ComponentPro.IO.SyncApplyingChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange">SyncApplyingChange</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.SyncApplyingChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.SyncApplyingChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange">SyncApplyingChange</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncApplyingChangeEventArgs.ChangeType">
            <summary>
            Gets the type of change to be applied.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncApplyingChangeEventArgs.NewFile">
            <summary>
            Gets the new file information for the file to be changed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncApplyingChangeEventArgs.CurrentFile">
            <summary>
            Gets the current file information for the file to be changed.
            </summary>
            <remarks>
            This property is set to a null reference when <see cref="P:ComponentPro.IO.SyncApplyingChangeEventArgs.ChangeType"/> is Create.
            </remarks>
        </member>
        <member name="P:ComponentPro.IO.SyncApplyingChangeEventArgs.SkipChange">
            <summary>
            Gets or sets a value that indicates whether this change should be skipped.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SyncChangeType">
            <summary>
            Represents the different types of changes that can be applied to a destination replica.
            </summary>
            <remarks>
            The <see cref="T:ComponentPro.IO.SyncChangeType"/> enumeration communicates the type of change that is being applied.
            It is used by the <see cref="E:ComponentPro.IO.FileSystem.SyncAppliedChange"/>, <see cref="E:ComponentPro.IO.FileSystem.SyncApplyingChange"/>, and <see cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange"/> events to supply the event handler with information about the change.    
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.SyncChangeType.Create">
            <summary>
            A file or directory will be created.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SyncChangeType.Update">
            <summary>
            A file or directory will be updated.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SyncChangeType.Delete">
            <summary>
            A file a directory will be deleted.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.SyncChangeType.Rename">
            <summary>
            A file or directory will be renamed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SyncOptions">
            <summary>
            Provides advanced options for the <see cref="M:ComponentPro.IO.FileSystem.Synchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)"/> and <see cref="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.AsyncCallback,System.Object)"/> methods.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncOptions.Comparer">
            <summary>
            Gets or sets the file comparison method. Default value is <see cref="F:ComponentPro.IO.FileSystem.FileNameComparer"/>.
            </summary>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileAttributesComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileContentComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileLastWriteTimeComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileNameComparer"/>
            <seealso cref="F:ComponentPro.IO.FileSystem.FileSizeComparer"/>
        </member>
        <member name="P:ComponentPro.IO.SyncOptions.SyncFileDateTime">
            <summary>
            Gets or sets a boolean value indicating file date time will be set. Default value is <b>false</b>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncOptions.Recursive">
            <summary>
            Gets or sets a boolean value indicating whether all files and subdirectories will be synchronized. Default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncOptions.SearchConditions">
            <summary>
            Gets or sets the search conditions to match against the files. Default value is an instance of the <see cref="T:ComponentPro.IO.NameSearchCondition"/> class with '*.*' file mask.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.SyncSkippedChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange">SyncSkippedChange</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.SyncSkippedChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.SyncSkippedChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.SyncSkippedChange">SyncSkippedChange</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncSkippedChangeEventArgs.ChangeType">
            <summary>
            Gets the type of change to be applied.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncSkippedChangeEventArgs.NewFile">
            <summary>
            Gets the new file information for the file to be changed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.SyncSkippedChangeEventArgs.CurrentFile">
            <summary>
            Gets the current file information for the file to be changed.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm">TransferConfirm</see> event of a <see cref="T:ComponentPro.IO.FileSystem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.IO.TransferConfirmEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.TransferConfirmEventArgs.CanPerform(ComponentPro.IO.TransferConfirmNextActions)">
            <summary>
            Determines whether the specified action is currently possible.
            </summary>
            <remarks>
            Use this to determine whether the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction"/> property can be set to the desired action.
            </remarks>
            <param name="action">The desired action to test.</param>
            <returns>True if the specified action is possible; otherwise is false.</returns>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.Exception">
            <summary>
            Gets the exception which will be raised if <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction"/> propety is set to <see cref="T:ComponentPro.IO.TransferConfirmNextActions">Cancel</see>, or a null reference if the issue does not contain an exception object.
            The <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.ConfirmReason"/> property contains further description.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.NewName">
            <summary>
            Gets or sets the new name for the currently processed file or directory. This new name can be a fully qualified file name or just a file name.
            </summary>
            <remarks>
            If the currently selected <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction"/> is set to Rename, this property has to be set; otherwise it is ignored.
            </remarks>
            <value>New name.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.PossibleNextActions">
            <summary>
            Gets a mask of possible actions that can be selected to be performed.
            </summary>
            <remarks>
            <see cref="T:ComponentPro.IO.TransferConfirmNextActions">Cancel</see> can always be set.
            Use the binary 'AND' operator to determine whether a specific action is currently possible or simply call the <see cref="M:ComponentPro.IO.TransferConfirmEventArgs.CanPerform(ComponentPro.IO.TransferConfirmNextActions)"/> method. 
            </remarks>
            <value>Mask of possible actions.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.NextAction">
            <summary>
            Gets or sets the currently selected next action. Specifies the operation to perform as the step of the multiple-files transfer execution. 
            </summary>
            <value>The next action.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.Message">
            <summary>
            Gets the detailed message.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.ConfirmReason">
            <summary>
            Gets the type of the error that furher describes the issue.
            </summary>
            <value>The issue.</value>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.SourceFileSystem">
            <summary>
            Gets the source file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.SourceFileInfo">
            <summary>
            Gets the source file info object.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationFileSystem">
            <summary>
            Gets the destination file system.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.TransferConfirmEventArgs.DestinationFileInfo">
            <summary>
            Gets the destination file info object.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmNextActions">
            <summary>
            Defines the action to resolve the current issue detected using the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.FollowLink">
            <summary>
            Resolve and process the symbolic link.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Overwrite">
            <summary>
            Overwrite target file with the same name.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.CheckAndOverwriteFilesWithDifferentSizes">
            <summary>
            Overwrite target file with the same name if it has a different size.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.CheckAndOverwriteOlderFiles">
            <summary>
            Overwrite target file with the same name if it is older than the source file.
            It is not recommended to use this action for remote file systems because modification dates are often misreported by SFTP and FTP servers. Instead, please select other action or handle the <see cref="E:ComponentPro.IO.FileSystem.TransferConfirm"/> event and choose either Overwrite or Skip action instead.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Rename">
            <summary>
            Use different name specified in the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NewName"/> property as the new destination name. 
            The desired name must be set using the <see cref="P:ComponentPro.IO.TransferConfirmEventArgs.NewName"/> property and it must not be empty or a null reference.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Retry">
            <summary>
            Retry the current operation.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Skip">
            <summary>
            Skip the current item. No actions will be performed on it.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.Cancel">
            <summary>
            Cancel the whole multiple-file transfer and raise an exception. No other files will be transferred.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmNextActions.ResumeFileTransfer">
            <summary>
            Resume file transfer.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferConfirmReason">
            <summary>
            Defines detailed specification of a problem that occured during the file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.InvalidDirectoryName">
            <summary>
            Name of the directory is invalid on the target file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.CannotCreateDirectory">
            <summary>
            Cannot create target directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.DirectoryNotFound">
            <summary>
            Cannot find the directory which was found while building the file system structure earlier.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.InaccessibleDirectory">
            <summary>
            Cannot read from a directory.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.InvalidFileName">
            <summary>
            Name of the file is invalid on the target file system.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileNotFound">
            <summary>
            Cannot find the file which was found while building the file system structure earlier.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileTransferFailed">
            <summary>
            Cannot transfer file.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.FileAlreadyExists">
            <summary>
            A target file with the same name already exists.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.RecursiveSymlink">
            <summary>
            The symbolic link is probably a part of an infinite loop in the file system structure.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.SymlinkDetected">
            <summary>
            A symbolic link was detected.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.CannotResolveSymlink">
            <summary>
            Cannot resolve the symlink, the link is corrupted or its target cannot be found.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.LinkNotFound">
            <summary>
            Cannot find the link which was found while building the file system structure earlier.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferConfirmReason.NotSupported">
            <summary>
            The currently processed item is neither a file nor a directory.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.TransferState">
            <summary>
            Specifies the state of the file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.None">
            <summary>
            File system is in idle mode or preparing for transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.BuildingDirectoryStructure">
            <summary>
            Building directory structure.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DirectoryStructureBuilt">
            <summary>
            Directory structure has been built.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartUploadFile">
            <summary>
            Remote file system is about to upload a file from other file system. This field equals to StartStoringFile.
            </summary>
            <remarks>
            When the transfer state is StartUploadFile, 
            you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> uploading file in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartStoringFile">
            <summary>
            File system is about to storing a file from other file system. This field equals to StartUploadingFile.
            </summary>
            <remarks>
            When the transfer state is StartStoringFile, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> storing file in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Uploading">
            <summary>
            Remote file system is uploading a file. This field equals to Storing.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Storing">
            <summary>
            File system is storing a file. This field equals to Uploading.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileUploaded">
            <summary>
            Upload completed. This field equals to FileStored.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileStored">
            <summary>
            File has been stored. This field equals to FileUploaded.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartDownloadFile">
            <summary>
            Remote file system is about to download a file. This field equals to StartCopyingFile.
            </summary>
            <remarks>
            When the transfer state is StartDownloadFile, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> downloading file in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartCopyingFile">
            <summary>
            File system is about to copy a file to other file system. This field equals to StartDownloadFile.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartExtractingFile">
            <summary>
            ZIP File system is about to extract a file to other file system. This field equals to StartDownloadFile and StartCopyingFile.
            </summary>
            <remarks>
            When the transfer state is StartExtractingFile, you can change <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.SourcePath">source file path</see>, 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.DestinationPath">destination file path</see>, or 
            <see cref="P:ComponentPro.IO.FileSystemProgressEventArgs.Skip">skip</see> extracting file in the <see cref="E:ComponentPro.IO.FileSystem.Progress">Progress</see> event handler.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Downloading">
            <summary>
            Remote file system is downloading a file to other file system. This field equals to Copying.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Extracting">
            <summary>
            ZIP file system is extracting a file to other file system. This field equals to Copying and Downloading.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Copying">
            <summary>
            File system is copying a file to other file system. This field equals to Downloading.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileDownloaded">
            <summary>
            Download completed. This field equals to FileCopied.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileCopied">
            <summary>
            File copied. This field equals to FileDownloaded.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileExtracted">
            <summary>
            Archive item has been extracted successfullly. This field equals to FileDownloaded and FileCopied.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DeletingFile">
            <summary>
            The current file is being deleted. This state is only available in multiple file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.DeletingDirectory">
            <summary>
            The current directory is being deleted. This state is only available in multiple file transfer.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.Comparing">
            <summary>
            The current file is being compared with other file.
            </summary>
            <remarks>
            If the transfer state is Comparing, two files are being compared with each other in the synchronization process. 
            A folder synchronization is initiated by calling the <see cref="M:ComponentPro.IO.FileSystem.Synchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions)"/> or <see cref="M:ComponentPro.IO.FileSystem.BeginSynchronize(System.String,System.String,System.Boolean,ComponentPro.IO.SyncOptions,System.AsyncCallback,System.Object)"/> method.
            </remarks>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartComparingFile">
            <summary>
            The current file is about to be compared with other file.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.FileCompared">
            <summary>
            The current file has been compared.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.StartMovingItem">
            <summary>
            A file or directory is being moved.
            </summary>
        </member>
        <member name="F:ComponentPro.IO.TransferState.ItemMoved">
            <summary>
            A file or directory has been moved.
            </summary>
        </member>
    </members>
</doc>
